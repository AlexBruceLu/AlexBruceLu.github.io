<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AlexBruce</title>
  
  <subtitle>消遣阁</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://alexbrucelu.github.io/"/>
  <updated>2019-12-09T11:42:54.768Z</updated>
  <id>https://alexbrucelu.github.io/</id>
  
  <author>
    <name>AlexBruce Lu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu 16.04 安装 CUDA</title>
    <link href="https://alexbrucelu.github.io/2019/12/09/Ubuntu_16.04%E5%AE%89%E8%A3%85cuda%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/"/>
    <id>https://alexbrucelu.github.io/2019/12/09/Ubuntu_16.04%E5%AE%89%E8%A3%85cuda%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC/</id>
    <published>2019-12-09T11:05:23.000Z</published>
    <updated>2019-12-09T11:42:54.768Z</updated>
    
    <content type="html"><![CDATA[<p>@[TOC]</p><h2 id="一、操作系统"><a href="#一、操作系统" class="headerlink" title="一、操作系统:"></a><strong>一、操作系统:</strong></h2><p>研发工程师默认都是台式机，安装ubuntu16.04操作系统，默认我们安装好cuda和显卡驱动相关软件。如果需要重装系统请联系各属地IT，目前采用USB自动安装的方式，10分钟内可以安装完成</p><h2 id="二、卸载原有的驱动和cuda"><a href="#二、卸载原有的驱动和cuda" class="headerlink" title="二、卸载原有的驱动和cuda:"></a><strong>二、卸载原有的驱动和cuda:</strong></h2><p>sudo su root</p><p>service lightdm stop</p><p>nvidia-uninstall</p><p>apt-get install autoremove –purge nvidia*</p><p>/usr/local/cuda-8.0/bin/uninstall_cuda-8.0.pl(根据版本号有差别，此处以8.0为例子)</p><p>rm -rf /usr/local/cuda-8.0(!!!执行这一步时切勿误操作，否则容易导致系统崩溃)</p><h2 id="三、cuda安装：包含显卡驱动和相关软件包"><a href="#三、cuda安装：包含显卡驱动和相关软件包" class="headerlink" title="三、cuda安装：包含显卡驱动和相关软件包"></a><strong>三、cuda安装：包含显卡驱动和相关软件包</strong></h2><h3 id="1-下载cuda软件"><a href="#1-下载cuda软件" class="headerlink" title="1.下载cuda软件"></a>1.下载cuda软件</h3><p><strong>（8.0版本）</strong> wget <a href="https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run" target="_blank" rel="noopener">https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run</a></p><p><strong>（9.0版本）</strong> wget <a href="https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run" target="_blank" rel="noopener">https://developer.nvidia.com/compute/cuda/9.0/Prod/local_installers/cuda_9.0.176_384.81_linux-run</a></p><p><strong>（10.0版本）</strong>wget <a href="https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux" target="_blank" rel="noopener">https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux</a></p><p><strong>（10.1版本）</strong> </p><p>​        wget <a href="http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run" target="_blank" rel="noopener">http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run</a></p><p><strong>（10.2版本）</strong></p><p>​         wget <a href="http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run" target="_blank" rel="noopener">http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run</a></p><h3 id="2-下载NVIDIA显卡驱动"><a href="#2-下载NVIDIA显卡驱动" class="headerlink" title="2.下载NVIDIA显卡驱动"></a>2.下载NVIDIA显卡驱动</h3><p>wget <a href="http://cn.download.nvidia.com/XFree86/Linux-x86_64/440.36/NVIDIA-Linux-x86_64-440.36.run" target="_blank" rel="noopener">http://cn.download.nvidia.com/XFree86/Linux-x86_64/440.36/NVIDIA-Linux-x86_64-440.36.run</a></p><h3 id="3-添加安装程序的可执行权限："><a href="#3-添加安装程序的可执行权限：" class="headerlink" title="3.添加安装程序的可执行权限："></a>3.添加安装程序的可执行权限：</h3><p>chmod +x *.run</p><h3 id="4-禁用默认的nouveau开源显卡驱动："><a href="#4-禁用默认的nouveau开源显卡驱动：" class="headerlink" title="4.禁用默认的nouveau开源显卡驱动："></a>4.禁用默认的nouveau开源显卡驱动：</h3><p>echo “blacklist nouveau” &gt;&gt; /etc/modprobe.d/blacklist-nouveau.conf</p><p>之后建议重启下系统</p><h3 id="5-关闭系统图形界面，显卡驱动安装过程需要在命令行模式下进行（Ctrl-Alt-F2-进入命令行模式）"><a href="#5-关闭系统图形界面，显卡驱动安装过程需要在命令行模式下进行（Ctrl-Alt-F2-进入命令行模式）" class="headerlink" title="5.关闭系统图形界面，显卡驱动安装过程需要在命令行模式下进行（Ctrl + Alt + F2 进入命令行模式）"></a>5.关闭系统图形界面，显卡驱动安装过程需要在命令行模式下进行（Ctrl + Alt + F2 进入命令行模式）</h3><pre><code>sudo su rootservice lightdm stop</code></pre><h3 id="6-安装显卡驱动程序，命令："><a href="#6-安装显卡驱动程序，命令：" class="headerlink" title="6.安装显卡驱动程序，命令："></a>6.安装显卡驱动程序，命令：</h3><pre><code>./NVIDIA-Linux-x86_64-410.78.run -a -s -Z --no-opengl-files</code></pre><h3 id="7-安装CUDA-9-0-驱动（请把cuda安装程序和安装目标目录替换为自己需要安装的对应版本）"><a href="#7-安装CUDA-9-0-驱动（请把cuda安装程序和安装目标目录替换为自己需要安装的对应版本）" class="headerlink" title="7.安装CUDA-9.0 驱动（请把cuda安装程序和安装目标目录替换为自己需要安装的对应版本）"></a>7.安装CUDA-9.0 驱动（请把cuda安装程序和安装目标目录替换为自己需要安装的对应版本）</h3><pre><code>./cuda_9.0.176_384.81_linux.run --no-opengl-libs --toolkit --samples --samplespath=/usr/local/cuda-9.0 -silent</code></pre><h3 id="8-添加安装的环境变量（将红色部分替换为自己安装的对应版本）"><a href="#8-添加安装的环境变量（将红色部分替换为自己安装的对应版本）" class="headerlink" title="8.添加安装的环境变量（将红色部分替换为自己安装的对应版本）:"></a>8.添加安装的环境变量（将红色部分替换为自己安装的对应版本）:</h3><pre><code>echo &#39;export LD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/lib64/:/usr/local/cuda-9.0/lib:/usr/local/cuda-9.0/lib64/:$LD_LIBRARY_PATH&#39; &gt;&gt; /etc/profileecho &#39;export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/cuda-9.0/bin:/usr/local/cuda/bin:$PATH&#39; &gt;&gt; /etc/profileecho &#39;/usr/local/cuda/lib64&#39; &gt;&gt; /etc/ld.so.conf.d/cuda.confldconfig</code></pre><h3 id="9-下载cudnn"><a href="#9-下载cudnn" class="headerlink" title="9.下载cudnn"></a>9.下载cudnn</h3><ul><li><p><strong>Download cuDNN v7.6.5 (November 18th, 2019), for CUDA 10.2</strong></p><pre><code class="bash"> wget https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.2_20191118/cudnn-10.2-linux-x64-v7.6.5.32.tgz</code></pre></li><li><p><strong>Download cuDNN v7.6.5 (November 5th, 2019), for CUDA 10.1</strong></p><pre><code>wget https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.5.32/Production/10.1_20191031/cudnn-10.1-linux-x64-v7.6.5.32.tgz</code></pre></li><li><p><strong>Download cuDNN v7.6.4 (September 27, 2019), for CUDA 10.0</strong></p><pre><code>wget https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.4.38/Production/10.0_20190923/cudnn-10.0-linux-x64-v7.6.4.38.tgz</code></pre></li><li><p><strong>Download cuDNN v7.6.3 (August 23, 2019), for CUDA 9.0</strong></p><pre><code>wget https://developer.nvidia.com/compute/machine-learning/cudnn/secure/7.6.3.30/Production/9.0_20190822/cudnn-9.0-linux-x64-v7.6.3.30.tgz</code></pre></li><li><p><strong>Download cuDNN v7.1.3 (April 17, 2018), for CUDA 8.0</strong></p><pre><code>wget https://developer.nvidia.com/compute/machine-learning/cudnn/secure/v7.1.3/prod/8.0_20180414/cudnn-8.0-linux-x64-v7.1</code></pre></li></ul><h3 id="10-安装cudnn"><a href="#10-安装cudnn" class="headerlink" title="10.安装cudnn"></a>10.安装cudnn</h3><pre><code>tar xf cudnn-9.0-linux-x64-v7.tarmv cuda/lib64/libcudnn* /usr/local/cuda-9.0/lib64/mv cuda/include/cudnn.h /usr/local/cuda-9.0/include/</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、操作系统&quot;&gt;&lt;a href=&quot;#一、操作系统&quot; class=&quot;headerlink&quot; title=&quot;一、操作系统:&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、操作系统:&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;研发工程师默认都是台式机，安装ubuntu
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://alexbrucelu.github.io/categories/Linux/"/>
    
      <category term="NVIDIA" scheme="https://alexbrucelu.github.io/categories/Linux/NVIDIA/"/>
    
    
      <category term="ubuntu" scheme="https://alexbrucelu.github.io/tags/ubuntu/"/>
    
      <category term="CUDA" scheme="https://alexbrucelu.github.io/tags/CUDA/"/>
    
  </entry>
  
  <entry>
    <title>git 新建仓库，添加远程分之到本地</title>
    <link href="https://alexbrucelu.github.io/2019/12/09/go_mod%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://alexbrucelu.github.io/2019/12/09/go_mod%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2019-12-09T10:56:13.000Z</published>
    <updated>2019-12-09T11:00:06.449Z</updated>
    
    <content type="html"><![CDATA[<p>@[TOC]</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="开启go-mod"><a href="#开启go-mod" class="headerlink" title="开启go mod"></a>开启go mod</h3><ol><li>把 golang 升级到 1.11（现在1.13 已经发布了，建议使用1.13）</li><li>设置 <code>GO111MODULE</code></li></ol><p>GO111MODULE</p><p><code>GO111MODULE</code> 有三个值：<code>off</code>, <code>on</code>和<code>auto（默认值）</code>。</p><ul><li><code>GO111MODULE=off</code>，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。</li><li><code>GO111MODULE=on</code>，go命令行会使用modules，而一点也不会去GOPATH目录下查找。</li><li><code>GO111MODULE=auto</code>，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：<ul><li>当前目录在GOPATH/src之外且该目录包含go.mod文件</li><li>当前文件在包含go.mod文件的目录下面。</li></ul></li></ul><blockquote><p>当modules 功能启用时，依赖包的存放位置变更为<code>$GOPATH/pkg</code>，允许同一个package多个版本并存，且多个项目可以共享缓存的 module。</p></blockquote><pre><code class="bash">export GO111MODULE=on</code></pre><h3 id="go-mod常用命令"><a href="#go-mod常用命令" class="headerlink" title="go mod常用命令"></a>go mod常用命令</h3><p>golang 提供了 <code>go mod</code>命令来管理包。</p><p>go mod 有以下命令：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>download</td><td>download modules to local cache(下载依赖包)</td></tr><tr><td>edit</td><td>edit go.mod from tools or scripts（编辑go.mod</td></tr><tr><td>graph</td><td>print module requirement graph (打印模块依赖图)</td></tr><tr><td>init</td><td>initialize new module in current directory（在当前目录初始化mod）</td></tr><tr><td>tidy</td><td>add missing and remove unused modules(拉取缺少的模块，移除不用的模块)</td></tr><tr><td>vendor</td><td>make vendored copy of dependencies(将依赖复制到vendor下)</td></tr><tr><td>verify</td><td>verify dependencies have expected content (验证依赖是否正确）</td></tr><tr><td>why</td><td>explain why packages or modules are needed(解释为什么需要依赖)</td></tr></tbody></table><h2 id="在项目中使用"><a href="#在项目中使用" class="headerlink" title="在项目中使用"></a>在项目中使用</h2><h3 id="示例一：创建一个新项目"><a href="#示例一：创建一个新项目" class="headerlink" title="示例一：创建一个新项目"></a>示例一：创建一个新项目</h3><ol><li>在<code>GOPATH 目录之外</code>新建一个目录，并使用<code>go mod init</code> 初始化生成<code>go.mod</code> 文件</li></ol><pre><code>➜  ~ mkdir hello➜  ~ cd hello➜  hello go mod init hellogo: creating new go.mod: module hello➜  hello lsgo.mod➜  hello cat go.modmodule hellogo 1.12</code></pre><blockquote><p>go.mod文件一旦创建后，它的内容将会被go toolchain全面掌控。go toolchain会在各类命令执行时，比如go get、go build、go mod等修改和维护go.mod文件。</p></blockquote><p>go.mod 提供了<code>module</code>, <code>require</code>、<code>replace</code>和<code>exclude</code> 四个命令</p><ul><li><code>module</code> 语句指定包的名字（路径）</li><li><code>require</code> 语句指定的依赖项模块</li><li><code>replace</code> 语句可以替换依赖项模块</li><li><code>exclude</code> 语句可以忽略依赖项模块</li></ul><ol><li>添加依赖</li></ol><p>新建一个 server.go 文件，写入以下代码：</p><pre><code>package mainimport (    &quot;net/http&quot;    &quot;github.com/labstack/echo&quot;)func main() {    e := echo.New()    e.GET(&quot;/&quot;, func(c echo.Context) error {        return c.String(http.StatusOK, &quot;Hello, World!&quot;)    })    e.Logger.Fatal(e.Start(&quot;:1323&quot;))}</code></pre><p>执行 <code>go run server.go</code> 运行代码会发现 go mod 会自动查找依赖自动下载：</p><pre><code>$ go run server.gogo: finding github.com/labstack/echo v3.3.10+incompatiblego: downloading github.com/labstack/echo v3.3.10+incompatiblego: extracting github.com/labstack/echo v3.3.10+incompatiblego: finding github.com/labstack/gommon/color latestgo: finding github.com/labstack/gommon/log latestgo: finding github.com/labstack/gommon v0.2.8# 此处省略很多行...   ____    __  / __/___/ /  ___ / _// __/ _ \/ _ \/___/\__/_//_/\___/ v3.3.10-devHigh performance, minimalist Go web frameworkhttps://echo.labstack.com____________________________________O/_______                                    O\⇨ http server started on [::]:1323</code></pre><p>现在查看go.mod 内容：</p><pre><code>$ cat go.modmodule hellogo 1.12require (    github.com/labstack/echo v3.3.10+incompatible // indirect    github.com/labstack/gommon v0.2.8 // indirect    github.com/mattn/go-colorable v0.1.1 // indirect    github.com/mattn/go-isatty v0.0.7 // indirect    github.com/valyala/fasttemplate v1.0.0 // indirect    golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a // indirect)</code></pre><p>go module 安装 package 的原則是先拉最新的 release tag，若无tag则拉最新的commit，详见 <a href="https://github.com/golang/go/wiki/Modules" target="_blank" rel="noopener">Modules官方介绍</a>。 go 会自动生成一个 go.sum 文件来记录 dependency tree：</p><pre><code>$ cat go.sumgithub.com/labstack/echo v3.3.10+incompatible h1:pGRcYk231ExFAyoAjAfD85kQzRJCRI8bbnE7CX5OEgg=github.com/labstack/echo v3.3.10+incompatible/go.mod h1:0INS7j/VjnFxD4E2wkz67b8cVwCLbBmJyDaka6Cmk1s=github.com/labstack/gommon v0.2.8 h1:JvRqmeZcfrHC5u6uVleB4NxxNbzx6gpbJiQknDbKQu0=github.com/labstack/gommon v0.2.8/go.mod h1:/tj9csK2iPSBvn+3NLM9e52usepMtrd5ilFYA+wQNJ4=github.com/mattn/go-colorable v0.1.1 h1:G1f5SKeVxmagw/IyvzvtZE4Gybcc4Tr1tf7I8z0XgOg=github.com/mattn/go-colorable v0.1.1/go.mod h1:FuOcm+DKB9mbwrcAfNl7/TZVBZ6rcnceauSikq3lYCQ=... 省略很多行</code></pre><ol><li>再次执行脚本 <code>go run server.go</code> 发现跳过了检查并安装依赖的步骤。</li><li>可以使用命令 <code>go list -m -u all</code> 来检查可以升级的package，使用<code>go get -u need-upgrade-package</code> 升级后会将新的依赖版本更新到go.mod<ul><li>也可以使用 <code>go get -u</code> 升级所有依赖</li></ul></li></ol><h4 id="go-get-升级"><a href="#go-get-升级" class="headerlink" title="go get 升级"></a>go get 升级</h4><ul><li>运行 go get -u 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)</li><li>运行 go get -u=patch 将会升级到最新的修订版本</li><li>运行 go get package@version 将会升级到指定的版本号version</li><li>运行go get如果有版本的更改，那么go.mod文件也会更改</li></ul><h3 id="示例二：改造现有项目-helloword"><a href="#示例二：改造现有项目-helloword" class="headerlink" title="示例二：改造现有项目(helloword)"></a>示例二：改造现有项目(helloword)</h3><p>项目目录为：</p><pre><code>$ tree.├── api│   └── apis.go└── server.go1 directory, 2 files</code></pre><p>server.go 源码为：</p><pre><code>package mainimport (    api &quot;./api&quot;  // 这里使用的是相对路径    &quot;github.com/labstack/echo&quot;)func main() {    e := echo.New()    e.GET(&quot;/&quot;, api.HelloWorld)    e.Logger.Fatal(e.Start(&quot;:1323&quot;))}</code></pre><p>api/apis.go 源码为：</p><pre><code>package apiimport (    &quot;net/http&quot;    &quot;github.com/labstack/echo&quot;)func HelloWorld(c echo.Context) error {    return c.JSON(http.StatusOK, &quot;hello world&quot;)}</code></pre><ol><li>使用 <code>go mod init ***</code> 初始化go.mod</li></ol><pre><code>$ go mod init helloworldgo: creating new go.mod: module helloworld</code></pre><ol><li>运行 <code>go run server.go</code></li></ol><pre><code>go: finding github.com/labstack/gommon/color latestgo: finding github.com/labstack/gommon/log latestgo: finding golang.org/x/crypto/acme/autocert latestgo: finding golang.org/x/crypto/acme latestgo: finding golang.org/x/crypto latestbuild command-line-arguments: cannot find module for path _/home/gs/helloworld/api</code></pre><p>首先还是会查找并下载安装依赖，然后运行脚本 <code>server.go</code>，这里会抛出一个错误：</p><pre><code>build command-line-arguments: cannot find module for path _/home/gs/helloworld/api</code></pre><p>但是<code>go.mod</code> 已经更新：</p><pre><code>$ cat go.modmodule helloworldgo 1.12require (        github.com/labstack/echo v3.3.10+incompatible // indirect        github.com/labstack/gommon v0.2.8 // indirect        github.com/mattn/go-colorable v0.1.1 // indirect        github.com/mattn/go-isatty v0.0.7 // indirect        github.com/valyala/fasttemplate v1.0.0 // indirect        golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a // indirect)</code></pre><h4 id="那为什么会抛出这个错误呢？"><a href="#那为什么会抛出这个错误呢？" class="headerlink" title="那为什么会抛出这个错误呢？"></a>那为什么会抛出这个错误呢？</h4><p>这是因为 server.go 中使用 internal package 的方法跟以前已经不同了，由于 go.mod会扫描同工作目录下所有 package 并且<code>变更引入方法</code>，必须将 helloworld当成路径的前缀，也就是需要写成 import helloworld/api，以往 GOPATH/dep 模式允许的 import ./api 已经失效，详情可以查看这个 <a href="https://github.com/golang/go/issues/26645" target="_blank" rel="noopener">issue</a>。</p><ol><li>更新旧的package import 方式</li></ol><p>所以server.go 需要改写成：</p><pre><code>package mainimport (    api &quot;helloworld/api&quot;  // 这是更新后的引入方法    &quot;github.com/labstack/echo&quot;)func main() {    e := echo.New()    e.GET(&quot;/&quot;, api.HelloWorld)    e.Logger.Fatal(e.Start(&quot;:1323&quot;))}</code></pre><blockquote><p><code>一个小坑</code>：开始在golang1.11 下使用go mod 遇到过 <code>go build github.com/valyala/fasttemplate: module requires go 1.12</code> <a href="https://github.com/golang/go/issues/27565" target="_blank" rel="noopener">这种错误</a>，遇到类似这种需要升级到1.12 的问题，直接升级golang1.12 就好了。幸亏是在1.12 发布后才尝试的<code>go mod</code> 🤷‍♂️</p></blockquote><ol><li>到这里就和新创建一个项目没什么区别了</li></ol><h4 id="使用replace替换无法直接获取的package"><a href="#使用replace替换无法直接获取的package" class="headerlink" title="使用replace替换无法直接获取的package"></a>使用replace替换无法直接获取的package</h4><p>由于某些已知的原因，并不是所有的package都能成功下载，比如：<code>golang.org</code>下的包。</p><p>modules 可以通过在 go.mod 文件中使用 replace 指令替换成github上对应的库，比如：</p><pre><code>replace (    golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a =&gt; github.com/golang/crypto v0.0.0-20190313024323-a1f597ede03a)</code></pre><p>或者</p><pre><code>replace golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a =&gt; github.com/golang/crypto v0.0.0-20190313024323-a1f597ede03a</code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/golang/go/wiki/Modules" target="_blank" rel="noopener">Modules官方介绍</a></li><li><a href="https://www.lightblue.asia/golang-1-11-new-festures-modules/?doing_wp_cron=1552464864.6369309425354003906250" target="_blank" rel="noopener">Golang 1.11 新功能介紹 – Modules</a></li><li><a href="https://talks.godoc.org/github.com/myitcv/talks/2018-08-15-glug-modules/main.slide#1" target="_blank" rel="noopener">What are Go modules and how do I use them?</a></li><li><a href="https://github.com/golang/go/issues/27565" target="_blank" rel="noopener">go mod doesn’t work for github.com/gomarkdown/markdown/html</a></li><li><a href="https://www.cnblogs.com/apocelipes/p/10295096.html" target="_blank" rel="noopener">再探go modules：使用与细节</a></li><li><a href="https://tonybai.com/2018/07/15/hello-go-module/" target="_blank" rel="noopener">初窥Go module</a></li></ul><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p>[1] Modules官方介绍: <a href="https://github.com/golang/go/wiki/Modules" target="_blank" rel="noopener">https://github.com/golang/go/…</a><br>[2] issue: <a href="https://github.com/golang/go/issues/26645" target="_blank" rel="noopener">https://github.com/golang/go/…</a><br>[3] 这种错误: <a href="https://github.com/golang/go/issues/27565" target="_blank" rel="noopener">https://github.com/golang/go/…</a><br>[4] Modules官方介绍: <a href="https://github.com/golang/go/wiki/Modules" target="_blank" rel="noopener">https://github.com/golang/go/…</a><br>[5] Golang 1.11 新功能介紹 – Modules: <a href="https://www.lightblue.asia/golang-1-11-new-festures-modules/?doing_wp_cron=1552464864.6369309425354003906250" target="_blank" rel="noopener">https://www.lightblue.asia/go…</a><br>[6] What are Go modules and how do I use them?: <a href="https://talks.godoc.org/github.com/myitcv/talks/2018-08-15-glug-modules/main.slide#1" target="_blank" rel="noopener">https://talks.godoc.org/githu…</a><br>[7] go mod doesn’t work for github.com/gomarkdown/markdown/html : <a href="https://github.com/golang/go/issues/27565" target="_blank" rel="noopener">https://github.com/golang/go/…</a><br>[8] 再探go modules：使用与细节: <a href="https://www.cnblogs.com/apocelipes/p/10295096.html" target="_blank" rel="noopener">https://www.cnblogs.com/apoce…</a><br>[9] 初窥Go module: <a href="https://tonybai.com/2018/07/15/hello-go-module/" target="_blank" rel="noopener">https://tonybai.com/2018/07/1…</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[TOC]&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;h3 id=&quot;开启go-mod&quot;&gt;&lt;a href=&quot;#开启go-mod&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://alexbrucelu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="GO" scheme="https://alexbrucelu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/GO/"/>
    
    
      <category term="go" scheme="https://alexbrucelu.github.io/tags/go/"/>
    
      <category term="go mod" scheme="https://alexbrucelu.github.io/tags/go-mod/"/>
    
  </entry>
  
  <entry>
    <title>git 新建仓库，添加远程分之到本地</title>
    <link href="https://alexbrucelu.github.io/2019/12/09/git%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93/"/>
    <id>https://alexbrucelu.github.io/2019/12/09/git%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93/</id>
    <published>2019-12-09T10:40:43.000Z</published>
    <updated>2019-12-09T10:44:12.272Z</updated>
    
    <content type="html"><![CDATA[<p>@[TOC]</p><h3 id="本地不存在仓库拉取远程分之"><a href="#本地不存在仓库拉取远程分之" class="headerlink" title="本地不存在仓库拉取远程分之"></a>本地不存在仓库拉取远程分之</h3><pre><code>echo &quot;# gin-web&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin https://github.com/AlexBruceLu/gin-web.gitgit push -u origin master</code></pre><h3 id="本地已有的仓库添加到远程"><a href="#本地已有的仓库添加到远程" class="headerlink" title="本地已有的仓库添加到远程"></a>本地已有的仓库添加到远程</h3><pre><code>git remote add origin https://github.com/AlexBruceLu/gin-web.gitgit push -u origin master</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[TOC]&lt;/p&gt;
&lt;h3 id=&quot;本地不存在仓库拉取远程分之&quot;&gt;&lt;a href=&quot;#本地不存在仓库拉取远程分之&quot; class=&quot;headerlink&quot; title=&quot;本地不存在仓库拉取远程分之&quot;&gt;&lt;/a&gt;本地不存在仓库拉取远程分之&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;echo
      
    
    </summary>
    
    
      <category term="工具" scheme="https://alexbrucelu.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="https://alexbrucelu.github.io/categories/%E5%B7%A5%E5%85%B7/git/"/>
    
    
      <category term="git" scheme="https://alexbrucelu.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 升级最新版本 nvidia-docker</title>
    <link href="https://alexbrucelu.github.io/2019/12/09/Ubuntu16.04%E5%8D%87%E7%BA%A7%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%ACnvidia-docker/"/>
    <id>https://alexbrucelu.github.io/2019/12/09/Ubuntu16.04%E5%8D%87%E7%BA%A7%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%ACnvidia-docker/</id>
    <published>2019-12-09T09:18:48.000Z</published>
    <updated>2019-12-09T10:38:30.623Z</updated>
    
    <content type="html"><![CDATA[<p>@[TOC]</p><h3 id="Uninstall-old-versions"><a href="#Uninstall-old-versions" class="headerlink" title="Uninstall old versions"></a>Uninstall old versions</h3><p>Older versions of Docker were called <code>docker</code>, <code>docker.io</code>, or <code>docker-engine</code>. If these are installed, uninstall them:</p><pre><code>$ sudo apt-get remove docker docker-engine docker.io containerd runc</code></pre><p>It’s OK if <code>apt-get</code> reports that none of these packages are installed.</p><p>The contents of <code>/var/lib/docker/</code>, including images, containers, volumes, and networks, are preserved. The Docker Engine - Community package is now called <code>docker-ce</code>.</p><h3 id="Supported-storage-drivers"><a href="#Supported-storage-drivers" class="headerlink" title="Supported storage drivers"></a>Supported storage drivers</h3><p>Docker Engine - Community on Ubuntu supports <code>overlay2</code>, <code>aufs</code> and <code>btrfs</code> storage drivers.</p><blockquote><p><strong>Note</strong>: In Docker Engine - Enterprise, <code>btrfs</code> is only supported on SLES. See the documentation on <a href="https://docs.docker.com/engine/userguide/storagedriver/btrfs-driver/" target="_blank" rel="noopener">btrfs</a> for more details.</p></blockquote><p>For new installations on version 4 and higher of the Linux kernel, <code>overlay2</code> is supported and preferred over <code>aufs</code>. Docker Engine - Community uses the <code>overlay2</code> storage driver by default. If you need to use <code>aufs</code> instead, you need to configure it manually. See <a href="https://docs.docker.com/engine/userguide/storagedriver/aufs-driver/" target="_blank" rel="noopener">aufs</a></p><h3 id="Install-Docker-Engine-Community"><a href="#Install-Docker-Engine-Community" class="headerlink" title="Install Docker Engine - Community"></a>Install Docker Engine - Community</h3><p>You can install Docker Engine - Community in different ways, depending on your needs:</p><ul><li>Most users <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-repository" target="_blank" rel="noopener">set up Docker’s repositories</a> and install from them, for ease of installation and upgrade tasks. This is the recommended approach.</li><li>Some users download the DEB package and <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-from-a-package" target="_blank" rel="noopener">install it manually</a> and manage upgrades completely manually. This is useful in situations such as installing Docker on air-gapped systems with no access to the internet.</li><li>In testing and development environments, some users choose to use automated <a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-using-the-convenience-script" target="_blank" rel="noopener">convenience scripts</a> to install Docker.</li></ul><h3 id="Install-using-the-repository"><a href="#Install-using-the-repository" class="headerlink" title="Install using the repository"></a>Install using the repository</h3><p>Before you install Docker Engine - Community for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.</p><h4 id="SET-UP-THE-REPOSITORY"><a href="#SET-UP-THE-REPOSITORY" class="headerlink" title="SET UP THE REPOSITORY"></a>SET UP THE REPOSITORY</h4><ol><li><p>Update the <code>apt</code> package index:</p><pre><code>$ sudo apt-get update</code></pre></li><li><p>Install packages to allow <code>apt</code> to use a repository over HTTPS:</p><pre><code>$ sudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg-agent \    software-properties-common</code></pre></li><li><p>Add Docker’s official GPG key:</p><pre><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></pre><p>Verify that you now have the key with the fingerprint <code>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code>, by searching for the last 8 characters of the fingerprint.</p><pre><code>$ sudo apt-key fingerprint 0EBFCD88pub   rsa4096 2017-02-22 [SCEA]      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88uid           [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;sub   rsa4096 2017-02-22 [S]</code></pre></li><li><p>Use the following command to set up the <strong>stable</strong> repository. To add the <strong>nightly</strong> or <strong>test</strong> repository, add the word <code>nightly</code> or <code>test</code> (or both) after the word <code>stable</code> in the commands below. <a href="https://docs.docker.com/install/" target="_blank" rel="noopener">Learn about <strong>nightly</strong> and <strong>test</strong> channels</a>.</p><blockquote><p><strong>Note</strong>: The <code>lsb_release -cs</code> sub-command below returns the name of your Ubuntu distribution, such as <code>xenial</code>. Sometimes, in a distribution like Linux Mint, you might need to change <code>$(lsb_release -cs)</code> to your parent Ubuntu distribution. For example, if you are using <code>Linux Mint Tessa</code>, you could use <code>bionic</code>. Docker does not offer any guarantees on untested and unsupported Ubuntu distributions.</p></blockquote></li></ol><ul><li><ul><li>x86_64 / amd64</li><li>armhf</li><li>arm64</li><li>ppc64le (IBM Power)</li><li>s390x (IBM Z)</li></ul></li></ul><pre><code>   $ sudo add-apt-repository \      &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \      $(lsb_release -cs) \      stable&quot;</code></pre><h4 id="INSTALL-DOCKER-ENGINE-COMMUNITY"><a href="#INSTALL-DOCKER-ENGINE-COMMUNITY" class="headerlink" title="INSTALL DOCKER ENGINE - COMMUNITY"></a>INSTALL DOCKER ENGINE - COMMUNITY</h4><ol><li><p>Update the <code>apt</code> package index.</p><pre><code>$ sudo apt-get update</code></pre></li><li><p>Install the <em>latest version</em> of Docker Engine - Community and containerd, or go to the next step to install a specific version:</p><pre><code>$ sudo apt-get install docker-ce docker-ce-cli containerd.io</code></pre><blockquote><p><strong></strong> Got multiple Docker repositories?</p><p>If you have multiple Docker repositories enabled, installing or updating without specifying a version in the <code>apt-get install</code> or <code>apt-get update</code> command always installs the highest possible version, which may not be appropriate for your stability needs.</p></blockquote></li><li><p>To install a <em>specific version</em> of Docker Engine - Community, list the available versions in the repo, then select and install:</p><p>a. List the versions available in your repo:</p><pre><code>$ apt-cache madison docker-ce  docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  docker-ce | 5:18.09.0~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  docker-ce | 18.06.1~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  docker-ce | 18.06.0~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  ...</code></pre><p>b. Install a specific version using the version string from the second column, for example, <code>5:18.09.1~3-0~ubuntu-xenial</code>.</p><pre><code>$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</code></pre></li><li><p>Verify that Docker Engine - Community is installed correctly by running the <code>hello-world</code> image.</p><pre><code class="shell">$ sudo docker run hello-world</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@[TOC]&lt;/p&gt;
&lt;h3 id=&quot;Uninstall-old-versions&quot;&gt;&lt;a href=&quot;#Uninstall-old-versions&quot; class=&quot;headerlink&quot; title=&quot;Uninstall old versions&quot;&gt;&lt;/a&gt;Uninst
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://alexbrucelu.github.io/categories/Linux/"/>
    
      <category term="docker" scheme="https://alexbrucelu.github.io/categories/Linux/docker/"/>
    
    
      <category term="ubuntu" scheme="https://alexbrucelu.github.io/tags/ubuntu/"/>
    
      <category term="nvidia-docker" scheme="https://alexbrucelu.github.io/tags/nvidia-docker/"/>
    
  </entry>
  
</feed>
