<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://alexbrucelu.github.io/"/>
  <updated>2018-11-25T15:06:55.323Z</updated>
  <id>https://alexbrucelu.github.io/</id>
  
  <author>
    <name>AlexBruceLu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gorountine</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/gorountine/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/gorountine/</id>
    <published>2018-11-25T15:04:32.074Z</published>
    <updated>2018-11-25T15:06:55.323Z</updated>
    
    <content type="html"><![CDATA[<p><strong> gorountine：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>go语言养成记之gorountine</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; gorountine：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;go语言养成记之gorountine&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://alexbrucelu.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://alexbrucelu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>channel</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/channel/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/channel/</id>
    <published>2018-11-25T15:04:32.073Z</published>
    <updated>2018-11-25T15:06:06.792Z</updated>
    
    <content type="html"><![CDATA[<p><strong> channel：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>go语言养成记之channel</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; channel：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;go语言养成记之channel&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://alexbrucelu.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://alexbrucelu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>http及其标准库</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/http%E5%8F%8A%E5%85%B6%E6%A0%87%E5%87%86%E5%BA%93/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/http及其标准库/</id>
    <published>2018-11-25T15:04:32.072Z</published>
    <updated>2018-11-25T15:07:46.015Z</updated>
    
    <content type="html"><![CDATA[<p><strong> http及其标准库：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>go语言养成记之http及其标准库</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; http及其标准库：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;go语言养成记之http及其标准库&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://alexbrucelu.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://alexbrucelu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>内建容器</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/%E5%86%85%E5%BB%BA%E5%AE%B9%E5%99%A8/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/内建容器/</id>
    <published>2018-11-25T15:04:21.765Z</published>
    <updated>2018-11-25T15:08:25.664Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 内建容器：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>go语言养成记之内建容器</p><a id="more"></a><h2 id="1-数组-Array"><a href="#1-数组-Array" class="headerlink" title="1. 数组 Array"></a>1. 数组 Array</h2><h3 id="1-1-为什么使用数组"><a href="#1-1-为什么使用数组" class="headerlink" title="1.1 为什么使用数组"></a>1.1 为什么使用数组</h3><ul><li>传统的方法不利于数据管理与维护，使用数组也容易扩展数据。</li><li><strong>注：</strong><font color="red">Go语言中的数组是之拷贝的传递</font></li></ul><h3 id="1-2-数组的四种初始化方法"><a href="#1-2-数组的四种初始化方法" class="headerlink" title="1.2 数组的四种初始化方法"></a>1.2 数组的四种初始化方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">3</span>]<span class="keyword">int</span> = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>&#125;</span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>:<span class="number">800</span>,<span class="number">2</span>:<span class="number">1000</span>,<span class="number">3</span>:<span class="number">900</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-数组的遍历"><a href="#1-3-数组的遍历" class="headerlink" title="1.3 数组的遍历"></a>1.3 数组的遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index,value := <span class="keyword">range</span> arr&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> index := <span class="keyword">range</span> arr&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：1. index 为数组元素的下标，value 为下标所对应的值</p><pre><code>2. index,value 只能在该for 循环内使用3. 可以用 &quot;_&quot; 来忽略index 或 value，当只有一个返回值时为index</code></pre><h3 id="1-4-数组使用时的注意事项"><a href="#1-4-数组使用时的注意事项" class="headerlink" title="1.4 数组使用时的注意事项"></a>1.4 数组使用时的注意事项</h3><ol><li>数组是定长的相同类型的数据集合</li><li>数组中的数据类型可以是任意数据类型，值类型、引用类型，但是不能混用</li><li>数组声明后若没有初始化，则元素的为声明是数据类型的默认零值(0，nil,””)</li><li>使用步骤：声明数据开辟空间 -&gt; 初始化值/赋值 -&gt; 使用</li><li>数组的下标是从0开始的，要注意下标越界</li><li>数组是值类型，数据传递为值拷贝</li><li>长度不同数据类型相同的两个数组是不同类型的数组</li><li>若要修改原来的数组值，则需要引用传递，即取地址</li></ol><h2 id="2-切片-Slice"><a href="#2-切片-Slice" class="headerlink" title="2. 切片 Slice"></a>2. 切片 Slice</h2><h2 id="3-map"><a href="#3-map" class="headerlink" title="3. map"></a>3. map</h2><h2 id="4-字符和字符串处理"><a href="#4-字符和字符串处理" class="headerlink" title="4. 字符和字符串处理"></a>4. 字符和字符串处理</h2><h3 id="4-1-字符串常用的系统函数"><a href="#4-1-字符串常用的系统函数" class="headerlink" title="4.1 字符串常用的系统函数"></a>4.1 字符串常用的系统函数</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 内建容器：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;go语言养成记之内建容器&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://alexbrucelu.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://alexbrucelu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>面向接口</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/面向接口/</id>
    <published>2018-11-25T15:04:21.763Z</published>
    <updated>2018-11-25T15:12:24.652Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 面向接口：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>go语言养成记之面向接口</p><a id="more"></a><h2 id="1-duck-typing-的概念"><a href="#1-duck-typing-的概念" class="headerlink" title="1. duck typing 的概念"></a>1. duck typing 的概念</h2><blockquote><p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p><p>在鸭子类型中，关注的不是对象的类型本身，而是它是如何使用的。</p><font color="blue">鸭子本来不是人，但是实现了某些人的方法就会被认为是人。</font></blockquote><ul><li><p>描述事物的外部行为而非内部结构</p></li><li><p>其他语言中的duck typing</p><ul><li>Python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(retriever)</span>:</span> // download 是duck typing 的使用者</span><br><span class="line">    <span class="keyword">return</span> retriever.get(<span class="string">"666"</span>) // retriever是duck typing的对象(实现者)</span><br></pre></td></tr></table></figure><p><strong>注 ：</strong>编译时才知道传入的retriever 有没有get</p><ul><li><p>C++</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>&gt;</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class"><span class="title">string</span> <span class="title">download</span>(<span class="title">const</span> <span class="title">R</span>&amp; <span class="title">retriever</span>) &#123;</span></span><br><span class="line">    <span class="keyword">return</span> retriever.get(<span class="string">"666"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注 ：</strong>1. 编译时才知道传入的retriever 有没有get</p><p>​    2. 需要注释来说明接口</p></li><li><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;R extends Retriever&gt;</span><br><span class="line"><span class="function">String <span class="title">download</span><span class="params">(R r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> retriever.get(<span class="string">"666"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong>传入的参数必须实现Retrieve 接口，并不是duck typing；不需要注释说明接口</p><font color="red">go语言中的duck typing，具有灵活性和类型检查的严格性</font></li></ul></li></ul><h2 id="2-接口的定义和实现"><a href="#2-接口的定义和实现" class="headerlink" title="2. 接口的定义和实现"></a>2. 接口的定义和实现</h2><h3 id="2-1-基本介绍"><a href="#2-1-基本介绍" class="headerlink" title="2.1 基本介绍"></a>2.1 基本介绍</h3><ul><li>golang 中多态的特性主要通过接口来实现的</li><li><p>interface 类型可以定义一组方法，但并需要实现。并且，interface 不能包含任何变量。到某个自定义类型要使用的时候，根据具体的情况再把这些方法实现出来</p></li><li><p>基本语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 接口名 <span class="keyword">interface</span> &#123;</span><br><span class="line">    method1(参数列表) 返回值列表</span><br><span class="line">    method2(参数列表) 返回值列表</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t 自定义类型)</span> <span class="title">method1</span><span class="params">(参数列表)</span> 返回值列表</span>&#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t 自定义类型)</span> <span class="title">method2</span><span class="params">(参数列表)</span> 返回值列表</span>&#123;</span><br><span class="line">    <span class="comment">// 具体实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口里的所有的方法都没有方法体，即<font color="red">接口的方法都是没有实现的方法</font>。接口体现了程序设计的<font color="red">多态和高内聚低耦合</font>的思想</li><li>接口不需要显式的实现，只要有一个变量，含有接口的所有方法，那么这个变量就实现了这个接口</li></ul></li></ul><h3 id="2-2-一个例子"><a href="#2-2-一个例子" class="headerlink" title="2.2 一个例子"></a>2.2 一个例子</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Retriever <span class="keyword">interface</span> &#123;</span><br><span class="line">    Get(url <span class="keyword">string</span>) <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(r Retriever)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r.Get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r Retriever</span><br><span class="line">    r = demo.Retriever&#123;&#125;</span><br><span class="line">    fmt.Println(download(r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Retriver <span class="keyword">struct</span> &#123;</span><br><span class="line">    UserAgent <span class="keyword">string</span></span><br><span class="line">    TimeOut time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r Retriver)</span> <span class="title">Get</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">    resp,err := http.Get(url)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    result,err := httputil.DumpResponse(resp,<span class="literal">true</span>)</span><br><span class="line">    resp.Body.Close()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong>：baidu.com 的网页信息</p><h2 id="3-接口的值类型"><a href="#3-接口的值类型" class="headerlink" title="3. 接口的值类型"></a>3. 接口的值类型</h2><h2 id="4-接口的组合"><a href="#4-接口的组合" class="headerlink" title="4. 接口的组合"></a>4. 接口的组合</h2><h2 id="5-常用的系统接口"><a href="#5-常用的系统接口" class="headerlink" title="5. 常用的系统接口"></a>5. 常用的系统接口</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 面向接口：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;go语言养成记之面向接口&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://alexbrucelu.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://alexbrucelu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/面向对象/</id>
    <published>2018-11-25T15:04:21.762Z</published>
    <updated>2018-11-25T15:11:44.259Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 面向对象：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>go语言养成记之面向对象</p><a id="more"></a><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h3><ol><li><p>golang 支持面向对象编程，与传统的面向对象编程语言有区别</p></li><li><p>golang 没有class 类的，面向对象编程是基于struct 结构体来实现的</p></li><li><p>golang 去掉了继承关键字、方法重载、构造函数和析构函数、隐藏的this 指针</p></li><li><p>golang 通过匿名字段来实现继承，多态和封装的特性仍然具备</p></li><li><p>通过接口关联能实现低耦合、高灵活度</p></li></ol><h3 id="2-结构体与结构体变量-实例-对象-的说明"><a href="#2-结构体与结构体变量-实例-对象-的说明" class="headerlink" title="2. 结构体与结构体变量(实例/对象)的说明"></a>2. 结构体与结构体变量(实例/对象)的说明</h3><blockquote><ul><li>结构体是自定义数据类型，代表一类事物</li><li>结构体变量(实例)是具体的、实际的代表一个具体的变量</li></ul></blockquote><h3 id="3-如何声明结构体"><a href="#3-如何声明结构体" class="headerlink" title="3. 如何声明结构体"></a>3. 如何声明结构体</h3><h4 id="3-1-基本语法"><a href="#3-1-基本语法" class="headerlink" title="3.1 基本语法"></a>3.1 基本语法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 结构体名称 <span class="keyword">struct</span> &#123;</span><br><span class="line">    field1 <span class="keyword">type</span></span><br><span class="line">    field2 <span class="keyword">type</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age <span class="keyword">int</span></span><br><span class="line">    Score <span class="keyword">float32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-字段、属性"><a href="#3-2-字段、属性" class="headerlink" title="3.2 字段、属性"></a>3.2 字段、属性</h4><ul><li><p>​    从概念上或者叫法上看：结构体字段 = 属性 =field</p></li><li><p>字段是结构体的一个组成部分，一般是<strong>基本数据类型、数组</strong>，也可以是引用类型。</p></li><li><p>注意事项和细节说明</p><ul><li>字段声明语法同变量，例：字段名 字段类型</li><li>字段类型可以为：基本类型、数组或引用类型</li><li>在创建一个结构体变量后，如果没有给该字段赋值，则默认为该数据类型的零值(bool false，int 0…)</li><li>结构体是值类型，不同的结构体字段是独立的，互不影响。一个结构体变量字段的更改，不影响另外一个</li><li>结构体成员变量的访问都使用 person.name 用” . “来访问</li><li>结构体的所有字段在内存中是<font color="red">连续的</font></li><li>结构体类型是用户单独定义的类型，和其他类型进行转换时需要有完全相同的字段(名字、个数、类型)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">    num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a A</span><br><span class="line">    <span class="keyword">var</span> b B</span><br><span class="line">    a = A(b)</span><br><span class="line">    fmt.Println(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重新定义相当于区别名，在golang 中认为是新的数据类型，但二者之间可以相互强转</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Num A</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a A</span><br><span class="line">    <span class="keyword">var</span> num Num</span><br><span class="line">    a = A(num)</span><br><span class="line">    fmt.Println(a,num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>struct 的每个字段上，可以写一个tag ，该tag 可以通过反射机制获取，常见的使用场景就是序列化和反序列化</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Monster <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`json:"name"`</span> <span class="comment">// `json:"name"`就是 struct tag</span></span><br><span class="line">    Age <span class="keyword">int</span> <span class="string">`json:"age"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-方法"><a href="#4-方法" class="headerlink" title="4. 方法"></a>4. 方法</h3><ol><li><p>基本介绍</p><blockquote><p>在某些情况下，我们需要声明(定义)方法。比如：Person 结构体除了有一些字段外，Person结构体还有一些行为，比如：说话、跑步、学习，这时候就要用到方法才能实现。</p></blockquote></li><li><p>方法的声明和调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">    Num <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a A)</span><span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(a.Num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>func (a A)test (){ }</code>表示A结构体有一方法，方法名为同test</li><li><code>(a A)</code>体现test方法是和A类型绑定的</li><li><code>test</code>方法只能通过<code>A</code>变量来调，而不能直接调用</li></ul></li><li><p>方法快速入门</p><ul><li><p>给Persion 结构添加speak方法，输出xxx是个好人</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Persion <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Persion)</span> <span class="title">speak</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(p.Name,<span class="string">"is a good man"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给Persion 结构添加sum方法，输出1+2+…+1000 的结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Persion <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Persion)</span> <span class="title">sum</span><span class="params">()</span></span> &#123;</span><br><span class="line">    res := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>,i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        res += i</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(p.Name,<span class="string">"get sum result is "</span>,res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法的调用和传参机制</p><blockquote><p>方法的调用和传参机制和函数基本一致，不一样的是方法调用时，会将调用方法的变量，当做实参也传递给方法。如果是值类型就进行值拷贝，如果是引用类型，进行地址传递。</p></blockquote></li></ol></li></ul><h3 id="5-方法和函数的区别"><a href="#5-方法和函数的区别" class="headerlink" title="5. 方法和函数的区别"></a>5. 方法和函数的区别</h3><ol><li><p>调用方式不一样</p><blockquote><p>函数的调用方式：函数名（实参列表）</p><p>方法的调用方式：变量.方法名（实参列表）</p></blockquote></li><li><p>对于普通函数，接受者为值类型时，不能将指针类型的数据直接传递，反之亦然</p></li><li><p>对于方法，接受者为值类型时，可以直接用指针类型的变量调用方法，反之亦然</p></li></ol><h3 id="6-面向对象编程步骤"><a href="#6-面向对象编程步骤" class="headerlink" title="6. 面向对象编程步骤"></a>6. 面向对象编程步骤</h3><ol><li>声明（定义）结构体，确定结构体名</li><li>编写结构体字段</li><li>编写结构体的方法</li></ol><h3 id="7-包和封装"><a href="#7-包和封装" class="headerlink" title="7. 包和封装"></a>7. 包和封装</h3><ul><li><p>包 ：每一目录一个包</p></li><li><p>main包，包含可执行入口</p></li><li><p>为结构体定义的包必须放在同一个目录下，可以是不同文件</p></li><li><p>工厂模式</p><ul><li><p>说明</p><blockquote><p>go 的结构体没有构造函数，通常使用工厂模式来解决这个问题</p></blockquote></li><li><p>解决问题</p><blockquote><p>如果当前文件需要引入别的包的结构体变量，当别的包的结构体变量首字母并没有大写时，不能直接引入，可以用工厂模式解决。</p></blockquote></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model 包文件</span></span><br><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Score <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewStudent</span> <span class="params">(n <span class="keyword">string</span>,s <span class="keyword">float64</span>)</span> *<span class="title">student</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;student&#123;</span><br><span class="line">        Name: n,</span><br><span class="line">        Score: s</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------main.go--------------------</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">"model"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    stu := model.NewStudent(<span class="string">"jerry"</span>,<span class="number">68.2</span>)</span><br><span class="line">    fmt.Println(*stu)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>封装</p><ul><li><p>基本介绍</p><blockquote><p>封装就是把抽象出的字段和对字段的操作封装在一起，数据被保护在内部，程序的其它包只有通过被授权的操作（方法），才能对字段进行操作。</p></blockquote></li><li><p>封装的理解和好处</p><blockquote><ol><li>隐藏实现细节</li><li>可以对数据进行验证，保证安全合理</li></ol></blockquote></li><li><p>如何体现封装</p><blockquote><ol><li>对结构体中的属性进行封装</li><li>通过方法、包实现封装</li></ol></blockquote></li><li><p>封装的实现方法</p><blockquote><ol><li><p>将结构体、字段（属性）的首字母小写（不能导出，被其他包所使用，类似于private）</p></li><li><p>给结构体所在的包提供一个工厂模式的函数，首字母大写。类似于一个构造函数</p></li><li><p>提供一个首字母大写的Set方法（类似于public），用于属性判断并赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="function"><span class="keyword">func</span> <span class="params">(<span class="keyword">var</span> 结构体类型名)</span> <span class="title">SetXXX</span><span class="params">(参数列表)</span> <span class="params">(返回值列表)</span></span>&#123;</span><br><span class="line">&gt;        <span class="comment">// 加入数据验证业务逻辑</span></span><br><span class="line">&gt;        <span class="keyword">var</span>.字段 = 参数</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="4"><li><p>提供一个首字母大写的Get方法（类似于public），用于获取属性的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="function"><span class="keyword">func</span> <span class="params">(<span class="keyword">var</span> 结构体类型名)</span> <span class="title">GetXxx</span><span class="params">()</span></span> &#123;</span><br><span class="line">&gt;        <span class="keyword">return</span> <span class="keyword">var</span>.age</span><br><span class="line">&gt;    &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote></li><li><p>实例</p><blockquote><p>对于隐私信息，工资、年龄保密，输入年龄进行验证。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">package</span> model</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">&gt;     name <span class="keyword">string</span></span><br><span class="line">&gt;     age <span class="keyword">int</span></span><br><span class="line">&gt;     sal <span class="keyword">float64</span></span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">person</span></span> &#123;</span><br><span class="line">&gt;     retrun &amp;person&#123;</span><br><span class="line">&gt;         name: name</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span> <span class="title">SetAge</span><span class="params">(age <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">&gt;     <span class="keyword">if</span> age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">150</span> &#123;</span><br><span class="line">&gt;         p.age = age</span><br><span class="line">&gt;     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">&gt;         <span class="keyword">return</span></span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span> <span class="title">GetAge</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">&gt;     <span class="keyword">return</span> p.Age</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span> <span class="title">SetSel</span><span class="params">(sel <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">&gt;     p.sel = sel</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span> <span class="title">GetSel</span> <span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">&gt;     <span class="keyword">return</span> p.sel</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>扩充系统类型或者别人的类型</p><blockquote><ol><li>定义别名</li><li>使用组合</li></ol></blockquote></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue </span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Queue []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Push</span> <span class="params">(v <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    *q = <span class="built_in">append</span>(*q,v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    head := (*q)[<span class="number">0</span>]</span><br><span class="line">    *q = (*q)[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"queue"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    q := queue.Queue&#123;<span class="number">1</span>&#125;</span><br><span class="line">    q.Push(<span class="number">2</span>)</span><br><span class="line">    q.Push(<span class="number">3</span>)</span><br><span class="line">    fmt.Println(q.pop())</span><br><span class="line">    fmt.Println(q.pop())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 面向对象：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;go语言养成记之面向对象&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://alexbrucelu.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://alexbrucelu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>基础语法</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/基础语法/</id>
    <published>2018-11-25T15:04:21.760Z</published>
    <updated>2018-11-25T15:09:33.545Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 基础语法：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>go语言养成记之基础语法</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 基础语法：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;go语言养成记之基础语法&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://alexbrucelu.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://alexbrucelu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/函数式编程/</id>
    <published>2018-11-25T15:04:21.758Z</published>
    <updated>2018-11-25T15:09:01.510Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 函数式编程：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>go语言养成记之函数式编程</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 函数式编程：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;go语言养成记之函数式编程&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://alexbrucelu.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://alexbrucelu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>错误处理及资源管理</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%8F%8A%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/错误处理及资源管理/</id>
    <published>2018-11-25T15:04:21.756Z</published>
    <updated>2018-11-25T15:11:09.807Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 错误处理及资源管理：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>go语言养成记之错误处理及资源管理</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 错误处理及资源管理：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;go语言养成记之错误处理及资源管理&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://alexbrucelu.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://alexbrucelu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>测试与性能调优</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/测试与性能调优/</id>
    <published>2018-11-25T15:04:21.754Z</published>
    <updated>2018-11-25T15:10:09.343Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 测试与性能调优：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>go语言养成记之测试与性能调优</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 测试与性能调优：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;go语言养成记之测试与性能调优&lt;/p&gt;
    
    </summary>
    
      <category term="golang" scheme="https://alexbrucelu.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="https://alexbrucelu.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Consul</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/consul/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/consul/</id>
    <published>2018-11-25T14:51:39.755Z</published>
    <updated>2018-11-25T14:53:26.338Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Consul：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>微服务之Consul</p><a id="more"></a><h1 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h1><h2 id="1-Consul的介绍"><a href="#1-Consul的介绍" class="headerlink" title="1. Consul的介绍"></a>1. Consul的介绍</h2><h3 id="1-1-Consul是什么"><a href="#1-1-Consul是什么" class="headerlink" title="1.1 Consul是什么"></a>1.1 Consul是什么</h3><p>Consul是HashiCorp公司推出的开源工具，用于实现分布式系统的服务发现与配置。 Consul是分布式的、高可用的、可横向扩展的。它具备以下特性 :</p><ul><li>service discovery：consul通过DNS或者HTTP接口使服务注册和服务发现变的很容易，一些外部服务，例如saas提供的也可以一样注册。</li><li>health checking：健康检测使consul可以快速的告警在集群中的操作。和服务发现的集成，可以防止服务转发到故障的服务上面。</li><li>key/value storage：一个用来存储动态配置的系统。提供简单的HTTP接口，可以在任何地方操作。</li><li>multi-datacenter：无需复杂的配置，即可支持任意数量的区域。</li></ul><p><strong>举例说明</strong></p><blockquote><p>邮递员去某公司一栋大楼投递快件，向门卫询问员工甲在哪一个房间，门卫拿起桌上的通讯录查询，告知邮递员员工甲在具体什么位置。假如公司来了一个员工乙，他想让邮递员送过来，就要先让门卫知道自己在哪一个房间，需要去门卫那边登记，员工乙登记后，当邮递员向门卫询问时，门卫就可以告诉邮递员员工乙的具体位置。门卫知道员工乙的具体位置的过程就是服务发现，员工乙的位置信息可以被看作服务信息，门卫的通讯录就是上文中提到的数据交换格式，此例中员工乙就是上文的已方，门卫就是服务发现的提供者。</p></blockquote><h3 id="1-2-什么是服务发现"><a href="#1-2-什么是服务发现" class="headerlink" title="1.2 什么是服务发现"></a>1.2 什么是服务发现</h3><p>微服务的框架体系中，服务发现是不能不提的一个模块。相信了解或者熟悉微服务的童鞋应该都知道它的重要性。我们看下面的一幅图片：</p><p><img src="https://github.com/AlexBruceLu/DAPP/wiki/uber5.png" alt=""></p><p>客户端的一个接口，需要调用服务A-N。客户端必须要知道所有服务的网络位置的，以往的做法是配置文件中，或者有些配置在数据库中。这里就带出几个问题：</p><ul><li>需要配置N个服务的网络位置，加大配置的复杂性</li><li>服务的网络位置变化，都需要改变每个调用者的配置</li><li><p>集群的情况下，难以做负载（反向代理的方式除外）</p></li><li><font color="red">总结起来一句话：服务多了，配置很麻烦，问题多多</font></li></ul><p><img src="https://github.com/AlexBruceLu/DAPP/wiki/uber6.png" alt=""></p><p>与上图不同的是，加了个服务发现模块。图比较简单，这边文字描述下。服务A-N把当前自己的网络位置注册到服务发现模块（这里注册的意思就是告诉），服务发现就以K-V的方式记录下，K一般是服务名，V就是IP:PORT。服务发现模块定时的轮询查看这些服务能不能访问的了（这就是健康检查）。客户端在调用服务A-N的时候，就跑去服务发现模块问下它们的网络位置，然后再调用它们的服务。这样的方式是不是就可以解决上面的问题了呢？客户端完全不需要记录这些服务网络位置，客户端和服务端完全解耦！</p><h2 id="2-Consul的安装"><a href="#2-Consul的安装" class="headerlink" title="2. Consul的安装"></a>2. Consul的安装</h2><p>Consul用Golang实现，因此具有天然可移植性 (支持 Linux、windows和macOS)。安装包仅包含一个可执行文件。 Consul安装非常简单，只需要下载对应系统的软件包并解压后就可使用。</p><h3 id="2-1-下载安装"><a href="#2-1-下载安装" class="headerlink" title="2.1 下载安装"></a>2.1 下载安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 这里以 Linux系统为例：</span><br><span class="line"><span class="meta">$</span> wget https://releases.hashicorp.com/consul/1.2.0/consul_1.2.0_linux_amd64.zip</span><br><span class="line"><span class="meta">$</span> unzip consul_1.2.0_linux_amd64.zip</span><br><span class="line"><span class="meta">$</span> mv consul /usr/local/bin/</span><br></pre></td></tr></table></figure><p><a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">其他系统</a></p><h3 id="2-2-验证安装"><a href="#2-2-验证安装" class="headerlink" title="2.2 验证安装"></a>2.2 验证安装</h3><p>安装 Consul后，通过执行 consul命令，你可以看到命令列表的输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> consul # 出现下图内容证明安装成功</span><br></pre></td></tr></table></figure><p><img src="https://github.com/AlexBruceLu/DAPP/wiki/uber7.png" alt=""></p><h2 id="3-Consul主要作用"><a href="#3-Consul主要作用" class="headerlink" title="3. Consul主要作用"></a>3. Consul主要作用</h2><ul><li>client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群.</li><li>server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其他数据中心通讯. 每个数据中心的 server 数量推荐为 3 个或是 5 个</li></ul><h3 id="3-1-运行-Consul代理"><a href="#3-1-运行-Consul代理" class="headerlink" title="3.1 运行 Consul代理"></a>3.1 运行 Consul代理</h3><p>Consul是典型的 C/S架构，可以运行服务模式或客户模式。每一个数据中心必须有至少一个服务节点， 3到5个服务节点最好。非常不建议只运行一个服务节点，因为在节点失效的情况下数据有极大的丢失风险。</p><h3 id="3-2-运行Agent"><a href="#3-2-运行Agent" class="headerlink" title="3.2 运行Agent"></a>3.2 运行Agent</h3><p>完成Consul的安装后,必须运行agent. agent可以运行为server或client模式.每个数据中心至少必须拥有一台server. 建议在一个集群中有3或者5个server.部署单一的server,在出现失败时会不可避免的造成数据丢失.其他的agent运行为client模式.一个client是一个非常轻量级的进程.用于注册服务,运行健康检查和转发对server的查询.agent必须在集群中的每个主机上运行.</p><h3 id="3-3-启动-Consul-Server"><a href="#3-3-启动-Consul-Server" class="headerlink" title="3.3 启动 Consul Server"></a>3.3 启动 Consul Server</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>node1:</span><br><span class="line"><span class="meta">$</span> consul agent -server -bootstrap-expect 2 -data-dir /tmp/consul -node=n1 -</span><br><span class="line">bind=192.168.110.123 -ui -config-dir /etc/consul.d -rejoin -join 192.168.110.123 -</span><br><span class="line">client 0.0.0.0</span><br><span class="line"><span class="meta">#</span>运行cosnul agent以server模式</span><br><span class="line">-server ： 定义agent运行在server模式</span><br><span class="line">-bootstrap-expect ：在一个datacenter中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap共用</span><br><span class="line">-data-dir：提供一个目录用来存放agent的状态，所有的agent允许都需要该目录，该目录必须是稳定的，系统重启后都继续存在</span><br><span class="line">-node：节点在集群中的名称，在一个集群中必须是唯一的，默认是该节点的主机名</span><br><span class="line">-bind：该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</span><br><span class="line">-ui： 启动web界面</span><br><span class="line">-config-dir：：配置文件目录，里面所有以.json结尾的文件都会被加载</span><br><span class="line">-rejoin：使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中。</span><br><span class="line">-client：consul服务侦听地址，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>node2:</span><br><span class="line"><span class="meta">$</span> consul agent -server -bootstrap-expect 2 -data-dir /tmp/consul -node=n2 -</span><br><span class="line">bind=192.168.110.148 -ui -rejoin -join 192.168.110.123</span><br><span class="line">-server ： 定义agent运行在server模式</span><br><span class="line">-bootstrap-expect ：在一个datacenter中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap共用</span><br><span class="line">-bind：该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</span><br><span class="line">-node：节点在集群中的名称，在一个集群中必须是唯一的，默认是该节点的主机名</span><br><span class="line">-ui： 启动web界面</span><br><span class="line">-rejoin：使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中。</span><br><span class="line">-config-dir：：配置文件目录，里面所有以.json结尾的文件都会被加载</span><br><span class="line">-client：consul服务侦听地址，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0</span><br><span class="line">-join 192.168.110.121 ： 启动时加入这个集群</span><br></pre></td></tr></table></figure><h3 id="3-4-启动-Consul-Client"><a href="#3-4-启动-Consul-Client" class="headerlink" title="3.4 启动 Consul Client"></a>3.4 启动 Consul Client</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>node3：</span><br><span class="line"><span class="meta">$</span> consul agent -data-dir /tmp/consul -node=n3 -bind=192.168.110.124 -config-dir/etc/consul.d -rejoin -join 192.168.110.123</span><br><span class="line">运行cosnul agent以client模式，-join 加入到已有的集群中去。</span><br></pre></td></tr></table></figure><ul><li>查看集群成员<ul><li><strong>新开一个终端窗口运行consul members, 你可以看到Consul集群的成员</strong></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> consul members</span><br><span class="line"><span class="meta">#</span>节点 网络地址 状态 类型 版本 协议 数据中心 分管部分</span><br><span class="line">Node Address Status Type Build Protocol DC Segment</span><br><span class="line">n1 192.168.110.7:8301 alive server 1.1.0 2 dc1 &lt;all&gt;</span><br><span class="line">n2 192.168.110.121:8301 alive server 1.1.0 2 dc1 &lt;all&gt;</span><br><span class="line">n3 192.168.110.122:8301 alive client 1.1.0 2 dc1 &lt;default&gt;</span><br></pre></td></tr></table></figure><h3 id="3-5-停止Agent"><a href="#3-5-停止Agent" class="headerlink" title="3.5 停止Agent"></a>3.5 停止Agent</h3><p>可以使用Ctrl-C 优雅的关闭Agent. 中断Agent之后你可以看到他离开了集群并关闭.</p><p>在退出中,Consul提醒其他集群成员,这个节点离开了.如果你强行杀掉进程.集群的其他成员应该能检测到这个节点失效了.当一个成员离开,他的服务和检测也会从目录中移除.当一个成员失效了,他的健康状况被简单的标记为危险,但是不会从目录中移除.Consul会自动尝试对失效的节点进行重连.允许他从某些网络条件下恢复过来.离开的节点则不会再继续联系.</p><p>此外,如果一个agent作为一个服务器,一个优雅的离开是很重要的,可以避免引起潜在的可用性故障影响达成一致性协议. consul优雅的退出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> consul leave</span><br></pre></td></tr></table></figure><h2 id="4-注册服务"><a href="#4-注册服务" class="headerlink" title="4. 注册服务"></a>4. 注册服务</h2><p>搭建好conusl集群后，用户或者程序就能到consul中去查询或者注册服务。可以通过提供服务定义文件或者调用HTTP API来注册一个服务.</p><ul><li><p>首先,为Consul配置创建一个目录.Consul会载入配置文件夹里的所有配置文件.在Unix系统中通常类似/etc/consul.d (.d 后缀意思是这个路径包含了一组配置文件).</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir /etc/consul.d</span><br></pre></td></tr></table></figure></li><li><p>然后,我们将编写服务定义配置文件.假设我们有一个名叫web的服务运行在 10000端口.另外,我们将给他设置一个标签.这样我们可以使用他作为额外的查询方式:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">"service": &#123; //服务</span><br><span class="line">"name": "web", //名称</span><br><span class="line">"tags": ["master"], //标记</span><br><span class="line">"address": "127.0.0.1", //ip</span><br><span class="line">"port": 10000, //端口</span><br><span class="line">"checks": [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"http"</span>: <span class="string">"http://localhost:10000/health"</span>,</span><br><span class="line"><span class="attr">"interval"</span>: <span class="string">"10s"</span> //检查时间</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"hello Web3! This is n3或者n2"</span>)</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Hello Web3! This is n3或者n2"</span>)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">healthHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"health check! n3或者n2"</span>)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>, handler)</span><br><span class="line">http.HandleFunc(<span class="string">"/health"</span>, healthHandler)</span><br><span class="line">http.ListenAndServe(<span class="string">":10000"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-查询服务"><a href="#5-查询服务" class="headerlink" title="5. 查询服务"></a>5. 查询服务</h2><p>一旦agent启动并且服务同步了.我们可以通过DNS或者HTTP的API来查询服务.</p><ul><li><p>DNS API</p><blockquote><p>让我们首先使用DNS API来查询.在DNS API中,服务的DNS名字是 NAME.service.consul. 虽然是可配置的,但默认的所有DNS名字会都在consul命名空间下.这个子域告诉Consul,我们在查询服务,NAME则是服务的名称.<br>对于我们上面注册的Web服务.它的域名是 web.service.consul :</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> dig @127.0.0.1 -p 8600 web.service.consul</span><br></pre></td></tr></table></figure></li><li><p>有也可用使用 DNS API 来接收包含 地址和端口的 SRV记录:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> dig @127.0.0.1 -p 8600 web.service.consul SRV</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-Consul架构"><a href="#6-Consul架构" class="headerlink" title="6. Consul架构"></a>6. Consul架构</h2><p><img src="https://github.com/AlexBruceLu/DAPP/wiki/uber8.png" alt=""></p><p>我们只看数据中心1，可以看出consul的集群是由N个SERVER，加上M个CLIENT组成的。而不管是<code>SERVER</code>还是<code>CLIENT</code>，都是consul的一个节点，所有的服务都可以注册到这些节点上，正是通过这些节点实现服务注册信息的共享。除了这两个，还有一些小细节，一一简单介绍。</p><p><code>CLIENT</code> CLIENT表示consul的client模式，就是客户端模式。是consul节点的一种模式，这种模式下，所有注册到当前节点的服务会被转发到SERVER【通过HTTP和DNS接<br>口请求server】，本身是<code>不持久化</code>这些信息。 </p><p><code>SERVER</code>SERVER表示consul的server模式，表明这个consul是个server，这种模式下，功能和CLIENT都一样，唯一不同的是，它会把所有的信息持久化的本地，这样遇到故障，信息是可以被保留的 <code>SERVER-LEADER</code> 中间那个SERVER下面有LEADER的字眼，表明这个SERVER是它们的老大，它和其它SERVER不一样的一点是，它需要负责同步注册的信息给其它的SERVER，同时也要负责各个节点的健康监测。</p><ul><li><p>Consul的client mode把请求转向server，那么client的作用是什么？</p><blockquote><p>consul可以用来实现分布式系统的服务发现与配置。client把服务请求传递给server，server负责提供服务以及和其他数据中心交互。题主的问题是，既然server端提供了所有服务，那为何还需要多此一举地用client端来接收一<br>次服务请求。我想，采用这种架构有以下几种理由： </p><p>首先server端的网络连接资源有限。对于一个分布式系统，一般情况下访问量是很大的。如果用户能不通过client直接地访问数据中心，那么数据中心必然要为每个用户提供一个单独的连接资源(线程，端口号等等)，那么server端的负担会非常大。所以很有必要用大量的client端来分散用户的连接请求，在client端先统一整合用户的服务请求，然后一次性地通过一个单一的链接发送大量的请求给server端，能够大量减少server端的网络负担。 </p><p>其次，在client端可以对用户的请求进行一些处理来提高服务的效率，比如将相同的请求合并成同一个查询，再比如将之前的查询通过cookie的形式缓存下来。但是这些功能都需要消耗不少的计算和存储资源。如果在server端提供这些功能，必然加重server端的负担，使得server端更加不稳定。而通过client端来进行这些服务就没有这些问题了，因为client端不提供实际服务，有很充足的计算资源来进行这些处理这些工作。 最后还有一点，consul规定只要接入一个client就能将自己注册到一个服务网络当中。这种架构使得系统的可扩展性非常的强，网络的拓扑变化可以特别的灵活。这也是依赖于client—server结构的。如果系统中只有几个数据中心存在，那网络的扩张也无从谈起了。</p></blockquote></li><li><p>Consul资料：</p></li><li><a href="http://www.liangxiansen.cn/2017/04/06/consul/" target="_blank" rel="noopener">http://www.liangxiansen.cn/2017/04/06/consul/</a></li><li><a href="https://blog.csdn.net/yuanyuanispeak/article/details/54880743" target="_blank" rel="noopener">https://blog.csdn.net/yuanyuanispeak/article/details/54880743</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Consul：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;微服务之Consul&lt;/p&gt;
    
    </summary>
    
      <category term="microServices" scheme="https://alexbrucelu.github.io/categories/microServices/"/>
    
    
      <category term="微服务" scheme="https://alexbrucelu.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>GRPC</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/GRPC/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/GRPC/</id>
    <published>2018-11-25T14:51:37.111Z</published>
    <updated>2018-11-25T14:54:00.825Z</updated>
    
    <content type="html"><![CDATA[<p><strong> GRPC：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>微服务之GRPC</p><a id="more"></a><h1 id="GRPC"><a href="#GRPC" class="headerlink" title="GRPC"></a>GRPC</h1><h2 id="1-什么是GRPC"><a href="#1-什么是GRPC" class="headerlink" title="1. 什么是GRPC"></a>1. 什么是GRPC</h2><p><img src="https://github.com/AlexBruceLu/DAPP/wiki/Uber2.png" alt=""></p><blockquote><p>GRPC 是一个高性能、开源和通用的 RPC 框架，面向移动和 HTTP/2 设计。GRPC基于 HTTP/2标准设计，带来诸如双向流、流控、头部压缩、单 TCP连接上的多复用请求等特。这些特性使得其在移动设备上表现更好，更省电和节省空间占用。</p><p>在 GRPC里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应用的方法，使得您能够更容易地创建分布式应用和服务。与许多 RPC系统类似， GRPC也是基于以下理念：定义一个服务，指定其能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个接口，并运行一个GRPC服务器来处理客户端调用。在客户端拥有一个存根能够像服务端一样的方法。 GRPC客户端和服务端可以在多种环境中运行和交互 -从 google内部的服务器到你自己的笔记本，并且可以用任何 GRPC支持的语言 来编写。所以，你可以很容易地用 Java创建一个GRPC服务端，用 Go、 Python、Ruby来创建客户端。此外， Google最新 API将有 GRPC版本的接口，使你很容易地将 Google的功能集成到你的应用里。</p></blockquote><h2 id="2-RPC"><a href="#2-RPC" class="headerlink" title="2. RPC"></a>2. RPC</h2><p>RPC（Remote Procedure Call Protocol）</p><blockquote><p>远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</p><p>简单来说，就是跟远程访问或者web请求差不多，都是一个client向远端服务器请求服务返回结果，但是web请求使用的网络协议是http高层协议，而rpc所使用的协议多为TCP，是网络层协议，减少了信息的包装，加快了处理速度。</p></blockquote><p>golang本身有rpc包，可以方便的使用，来构建自己的rpc服务，示例如下：</p><p><img src="https://github.com/AlexBruceLu/DAPP/wiki/uber3.png" alt=""></p><ol><li><p>调用客户端句柄；执行传送参数 </p></li><li><p>调用本地系统内核发送网络消息 </p></li><li><p>消息传送到远程主机 </p></li><li><p>服务器句柄得到消息并取得参数 </p></li><li><p>执行远程过程 </p></li><li><p>执行的过程将结果返回服务器句柄</p></li><li><p>服务器句柄返回结果，调用远程系统内核 </p></li><li><p>消息传回本地主机 </p></li><li><p>客户句柄由内核接收消息 </p></li><li><p>客户接收句柄返回的数据</p></li></ol><h3 id="2-1-服务端"><a href="#2-1-服务端" class="headerlink" title="2.1 服务端"></a>2.1 服务端</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/rpc"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="comment">//- 方法是导出的</span></span><br><span class="line"><span class="comment">//- 方法有两个参数，都是导出类型或内建类型</span></span><br><span class="line"><span class="comment">//- 方法的第二个参数是指针</span></span><br><span class="line"><span class="comment">//- 方法只有一个error接口类型的返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//func (t *T) MethodName(argType T1, replyType *T2) error</span></span><br><span class="line"><span class="keyword">type</span> Panda <span class="keyword">int</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Panda)</span><span class="title">Getinfo</span><span class="params">(argType <span class="keyword">int</span>, replyType *<span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">beego.Info(argType)</span><br><span class="line">*replyType =<span class="number">1</span> +argType</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//注册1个页面请求</span></span><br><span class="line">http.HandleFunc(<span class="string">"/panda"</span>,pandatext)</span><br><span class="line"><span class="comment">//new 一个对象</span></span><br><span class="line">pd :=<span class="built_in">new</span>(Panda)</span><br><span class="line"><span class="comment">//注册服务</span></span><br><span class="line"><span class="comment">//Register在默认服务中注册并公布 接收服务 pd对象 的方法</span></span><br><span class="line">rpc.Register(pd)</span><br><span class="line">rpc.HandleHTTP()</span><br><span class="line"><span class="comment">//建立网络监听</span></span><br><span class="line">ln , err :=net.Listen(<span class="string">"tcp"</span>,<span class="string">"127.0.0.1:10086"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">beego.Info(<span class="string">"网络连接失败"</span>)</span><br><span class="line">&#125; </span><br><span class="line">    beego.Info(<span class="string">"正在监听10086"</span>)</span><br><span class="line"><span class="comment">//service接受侦听器l上传入的HTTP连接，</span></span><br><span class="line">http.Serve(ln,<span class="literal">nil</span>)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//用来现实网页的web函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pandatext</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">io.WriteString(w,<span class="string">"panda"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-客户端"><a href="#2-2-客户端" class="headerlink" title="2.2 客户端"></a>2.2 客户端</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/rpc"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//rpc的与服务端建立网络连接</span></span><br><span class="line">cli,err := rpc.DialHTTP(<span class="string">"tcp"</span>,<span class="string">"127.0.0.1:10086"</span>)</span><br><span class="line"><span class="keyword">if</span> err !=<span class="literal">nil</span> &#123;</span><br><span class="line">beego.Info(<span class="string">"网络连接失败"</span>)</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">var</span> val <span class="keyword">int</span></span><br><span class="line"><span class="comment">//远程调用函数（被调用的方法，传入的参数 ，返回的参数）</span></span><br><span class="line">err =cli.Call(<span class="string">"Panda.Getinfo"</span>,<span class="number">123</span>,&amp;val)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">    beego.Info(<span class="string">"打call失败"</span>)</span><br><span class="line">&#125; </span><br><span class="line">    beego.Info(<span class="string">"返回结果"</span>,val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-GRPC使用-protocol-buffers"><a href="#3-GRPC使用-protocol-buffers" class="headerlink" title="3. GRPC使用 protocol buffers"></a>3. GRPC使用 protocol buffers</h2><p>GRPC默认使用protobuf，这是 Google开源的一套成熟的结构数据序列化机制（当然也可以使用其他数据格式如<br>JSON）。正如你将在下方例子里所看到的，你用 proto files创建 GRPC服务，用 protoBuf消息类型来定义方法参<br>数和返回类型。你可以在 Protocol Buffers文档找到更多关于 protoBuf的资料。 虽然你可以使用 proto2 (当前默<br>认的 protocol buffers版本 )，我们通常建议你在 GRPC里使用 proto3，因为这样你可以使用 GRPC支持全部范围的语言，并且能避免 proto2客户端与 proto3服务端交互时出现的兼容性问题，反之亦然。</p><p><img src="https://github.com/AlexBruceLu/DAPP/wiki/uber4.png" alt=""></p><h2 id="4-Hello-GRPC"><a href="#4-Hello-GRPC" class="headerlink" title="4. Hello GRPC"></a>4. Hello GRPC</h2><p>了解GRPC工作机制最简单的方法是看一个简单的例子。 Hello World将带领你创建一个简单的客户端 —— 服务端应用，向你展示： 通过一个protoBuf模式，定义一个简单的带有 Hello World方法的RPC服务。 用你最喜欢的语言 (如果可用的话 )来创建一个实现了这个接口的服务端。 用大家最喜欢的 (或者其他你愿意的 )语言来访问你的服务端。这个例子完整的代码在我们 GitHub源码库的 examples目录下。我们使用 Git版本系统来进行源码管理，但是除了如何安装和运行一些 Git命令外，你没必要知道其他关于 Git的任何事情。需要注意的是，并不是所有 GRPC支持的语言都可以编写我们例子的服务端代码，比如 PHP和 Objective-C仅支持创建客户端。比起针对于特定语言的复杂教程，这更像是一个介绍性的例子。你可以在本站找到更有深度的教程，GRPC支持的语言的参考文档很快就会全部开放。</p><h3 id="4-1-环境搭建"><a href="#4-1-环境搭建" class="headerlink" title="4.1 环境搭建"></a>4.1 环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>将x.zip 解压到 $GOPATH/src/golang.org/x 目录下</span><br><span class="line"><span class="meta">$</span> unzip x.zip -d $GOPATH/src/golang.org/x</span><br><span class="line"><span class="meta">#</span>-d 是指定解压目录地址</span><br><span class="line"><span class="meta">#</span>/home/itcast/go/src/golang.org</span><br><span class="line"><span class="meta">#</span>文件名为x</span><br><span class="line"><span class="meta">#</span>将google.golang.org.zip 解压到 $GOPATH/src/google.golang.org 目录下</span><br></pre></td></tr></table></figure><h3 id="4-2-启动服务端"><a href="#4-2-启动服务端" class="headerlink" title="4.2 启动服务端"></a>4.2 启动服务端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd $GOPATH/src/google.golang.org/grpc/examples/helloworld/greeter_server</span><br><span class="line"><span class="meta">$</span> go run main.go</span><br></pre></td></tr></table></figure><h3 id="4-3-启动客户端"><a href="#4-3-启动客户端" class="headerlink" title="4.3 启动客户端"></a>4.3 启动客户端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd $GOPATH/src/google.golang.org/grpc/examples/helloworld/greeter_client</span><br><span class="line"><span class="meta">$</span> go run main.go</span><br></pre></td></tr></table></figure><h3 id="4-4-客户端代码介绍"><a href="#4-4-客户端代码介绍" class="headerlink" title="4.4 客户端代码介绍"></a>4.4 客户端代码介绍</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"golang.org/x/net/context"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line">pb <span class="string">"google.golang.org/grpc/examples/helloworld/helloworld"</span></span><br><span class="line"><span class="comment">//这是引用编译好的protobuf</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">address = <span class="string">"localhost:50051"</span></span><br><span class="line">defaultName = <span class="string">"world"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 建立到服务器的连接。</span></span><br><span class="line">conn, err := grpc.Dial(address, grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"did not connect: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延迟关闭连接</span></span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">//调用protobuf的函数创建客户端连接句柄</span></span><br><span class="line">c := pb.NewGreeterClient(conn)</span><br><span class="line"><span class="comment">// 联系服务器并打印它的响应。</span></span><br><span class="line">name := defaultName</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) &gt; <span class="number">1</span> &#123;</span><br><span class="line">name = os.Args[<span class="number">1</span>]</span><br><span class="line">&#125; </span><br><span class="line">    <span class="comment">//调用protobuf的sayhello函数</span></span><br><span class="line">r, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: name&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not greet: %v"</span>, err)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">log.Printf(<span class="string">"Greeting: %s"</span>, r.Message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-服务端代码介绍"><a href="#4-5-服务端代码介绍" class="headerlink" title="4.5 服务端代码介绍"></a>4.5 服务端代码介绍</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"golang.org/x/net/context"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line">pb <span class="string">"google.golang.org/grpc/examples/helloworld/helloworld"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc/reflection"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">port = <span class="string">":50051"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器用于实现helloworld.GreeterServer。</span></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SayHello实现helloworld.GreeterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="params">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">"Hello "</span> + in.Name&#125;, <span class="literal">nil</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//监听</span></span><br><span class="line">lis, err := net.Listen(<span class="string">"tcp"</span>, port)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to listen: %v"</span>, err)</span><br><span class="line">&#125; </span><br><span class="line">    <span class="comment">//new服务对象</span></span><br><span class="line">s := grpc.NewServer()</span><br><span class="line"><span class="comment">//注册服务</span></span><br><span class="line">pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line"><span class="comment">// 在gRPC服务器上注册反射服务。</span></span><br><span class="line">reflection.Register(s)</span><br><span class="line"><span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to serve: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-go语言实现GRPC远程调用"><a href="#5-go语言实现GRPC远程调用" class="headerlink" title="5. go语言实现GRPC远程调用"></a>5. go语言实现GRPC远程调用</h2><h3 id="5-1-protobuf协议定义"><a href="#5-1-protobuf协议定义" class="headerlink" title="5.1 protobuf协议定义"></a>5.1 protobuf协议定义</h3><p>创建一个 protobuf package,如： my_rpc_proto;<br>在 $GOPATH/src/下创建 /my_grpc_proto/ 文件夹<br>里面创建 protobuf 协议文件 helloServer.proto</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>到工作目录</span><br><span class="line"><span class="meta">$</span> CD $GOPATH/src/</span><br><span class="line"><span class="meta">#</span>创建目录</span><br><span class="line"><span class="meta">$</span> mkdir grpc/myproto</span><br><span class="line"><span class="meta">#</span>进入目录</span><br><span class="line"><span class="meta">$</span> cd grpc/myproto</span><br><span class="line"><span class="meta">#</span>创建proto文件</span><br><span class="line"><span class="meta">$</span> vim helloServer.proto</span><br></pre></td></tr></table></figure><ul><li><p>文件内容</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">package my_grpc_proto;</span><br><span class="line"></span><br><span class="line">service HelloServer&#123;</span><br><span class="line">// 创建第一个接口</span><br><span class="line">rpc SayHello(HelloRequest)returns(HelloReplay)&#123;&#125;</span><br><span class="line">// 创建第二个接口</span><br><span class="line">rpc GetHelloMsg(HelloRequest)returns(HelloMessage)&#123;&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">message HelloRequest&#123;</span><br><span class="line">string name = 1 ;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">message HelloReplay&#123;</span><br><span class="line">string message = 1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">message HelloMessage&#123;</span><br><span class="line">string msg = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在当前文件下，编译 helloServer.proto文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> protoc --go_out=./ *.proto #不加grpc插件</span><br><span class="line"><span class="meta">$</span> protoc --go_out=plugins=grpc:./ *.proto #添加grpc插件</span><br><span class="line"><span class="meta">#</span>对比发现内容增加</span><br><span class="line"><span class="meta">#</span>得到 helloServer.pb.go文件</span><br></pre></td></tr></table></figure></li><li><p>GRPC-Server编写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line">pt <span class="string">"demo/grpc/proto"</span></span><br><span class="line"><span class="string">"context"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">post = <span class="string">"127.0.0.1:18881"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="comment">//对象要和proto内定义的服务一样</span></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="comment">//实现RPC SayHello 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(this *server)</span><span class="title">SayHello</span><span class="params">(ctx context.Context,in *pt.HelloRequest)</span><span class="params">(*pt.HelloReplay, error)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &amp;pt.HelloReplay&#123;Message:<span class="string">"hello"</span>+in.Name&#125;,<span class="literal">nil</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//实现RPC GetHelloMsg 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *server)</span> <span class="title">GetHelloMsg</span><span class="params">(ctx context.Context, in *pt.HelloRequest)</span><span class="params">(*pt.HelloMessage, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;pt.HelloMessage&#123;Msg: <span class="string">"this is from server HAHA!"</span>&#125;, <span class="literal">nil</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//监听网络</span></span><br><span class="line">ln ,err :=net.Listen(<span class="string">"tcp"</span>,post)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"网络异常"</span>,err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个grpc的句柄</span></span><br><span class="line">srv:= grpc.NewServer()</span><br><span class="line"><span class="comment">//将server结构体注册到 grpc服务中</span></span><br><span class="line">pt.RegisterHelloServerServer(srv,&amp;server&#123;&#125;)</span><br><span class="line"><span class="comment">//监听grpc服务</span></span><br><span class="line">    err= srv.Serve(ln)</span><br><span class="line">    <span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"网络启动异常"</span>,err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>GRPC-Client编写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"google.golang.org/grpc"</span></span><br><span class="line">pt <span class="string">"demo/grpc/proto"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"context"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">post = <span class="string">"127.0.0.1:18881"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 客户端连接服务器</span></span><br><span class="line">conn,err:=grpc.Dial(post,grpc.WithInsecure())</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"连接服务器失败"</span>,err)</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">//获得grpc句柄</span></span><br><span class="line">c:=pt.NewHelloServerClient(conn)</span><br><span class="line">    <span class="comment">// 远程调用 SayHello接口</span></span><br><span class="line">    <span class="comment">//远程调用 SayHello接口</span></span><br><span class="line">r1, err := c.SayHello(context.Background(), &amp;pt.HelloRequest&#123;Name: <span class="string">"panda"</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"cloud not get Hello server .."</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line">    fmt.Println(<span class="string">"HelloServer resp: "</span>, r1.Message)</span><br><span class="line"><span class="comment">//远程调用 GetHelloMsg接口</span></span><br><span class="line">    r2, err := c.GetHelloMsg(context.Background(), &amp;pt.HelloRequest&#123;Name: <span class="string">"panda"</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"cloud not get hello msg .."</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line">    fmt.Println(<span class="string">"HelloServer resp: "</span>, r2.Msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>先运行 server，后运行 client</span><br><span class="line"><span class="meta">#</span>得到以下输出结果</span><br><span class="line">HelloServer resp: hellopanda</span><br><span class="line">HelloServer resp: this is from server HAHA!</span><br><span class="line"><span class="meta">#</span>如果反之则会报错</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; GRPC：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;微服务之GRPC&lt;/p&gt;
    
    </summary>
    
      <category term="microServices" scheme="https://alexbrucelu.github.io/categories/microServices/"/>
    
    
      <category term="微服务" scheme="https://alexbrucelu.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Micro</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/micro/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/micro/</id>
    <published>2018-11-25T14:51:34.747Z</published>
    <updated>2018-11-25T14:54:23.881Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Micro：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>微服务之Micro</p><a id="more"></a><h1 id="Micro"><a href="#Micro" class="headerlink" title="Micro"></a>Micro</h1><h2 id="1-Micro的介绍"><a href="#1-Micro的介绍" class="headerlink" title="1. Micro的介绍"></a>1. Micro的介绍</h2><p>Micro解决了构建云本地系统的关键需求。它采用了微服务体系结构模式，并将其转换为一组工具，作为可伸缩平台的构建块。Micro隐藏了分布式系统的复杂性，并为开发人员提供了很好的理解概念。</p><p>Micro是一个专注于简化分布式系统开发的微服务生态系统。是一个工具集合, 通过将微服务架构抽象成一组工具。隐藏了分布式系统的复杂性，为开发人员提供了更简洁的概念。</p><h2 id="2-Micro的安装"><a href="#2-Micro的安装" class="headerlink" title="2. Micro的安装"></a>2. Micro的安装</h2><h3 id="2-1-下载micro"><a href="#2-1-下载micro" class="headerlink" title="2.1 下载micro"></a>2.1 下载micro</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go get -u -v github.com/go-log/log</span><br><span class="line"><span class="meta">$</span> go get -u -v github.com/gorilla/handlers</span><br><span class="line"><span class="meta">$</span> go get -u -v github.com/gorilla/mux</span><br><span class="line"><span class="meta">$</span> go get -u -v github.com/gorilla/websocket</span><br><span class="line"><span class="meta">$</span> go get -u -v github.com/mitchellh/hashstructure</span><br><span class="line"><span class="meta">$</span> go get -u -v github.com/nlopes/slack</span><br><span class="line"><span class="meta">$</span> go get -u -v github.com/pborman/uuid</span><br><span class="line"><span class="meta">$</span> go get -u -v github.com/pkg/errors</span><br><span class="line"><span class="meta">$</span> go get -u -v github.com/serenize/snaker</span><br><span class="line"><span class="meta">#</span> hashicorp_consul.zip包解压在github.com/hashicorp/consul</span><br><span class="line"><span class="meta">$</span> unzip hashicorp_consul.zip -d github.com/hashicorp/consul</span><br><span class="line"><span class="meta">#</span> miekg_dns.zip 包解压在github.com/miekg/dns</span><br><span class="line"><span class="meta">$</span> unzip miekg_dns.zip -d github.com/miekg/dns</span><br><span class="line"><span class="meta">$</span> go get github.com/micro/micro</span><br></pre></td></tr></table></figure><h3 id="2-2-编译安装micro"><a href="#2-2-编译安装micro" class="headerlink" title="2.2 编译安装micro"></a>2.2 编译安装micro</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd $GOPATH/src/github.com/micro/micro</span><br><span class="line"><span class="meta">$</span> go build -o micro main.go</span><br><span class="line"><span class="meta">$</span> sudo cp micro /bin/</span><br></pre></td></tr></table></figure><h3 id="2-3-插件安装"><a href="#2-3-插件安装" class="headerlink" title="2.3 插件安装"></a>2.3 插件安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go get -u github.com/golang/protobuf/&#123;proto,protoc-gen-go&#125;</span><br><span class="line"><span class="meta">$</span> go get -u github.com/micro/protoc-gen-micro</span><br></pre></td></tr></table></figure><h2 id="3-Micro的基本演示"><a href="#3-Micro的基本演示" class="headerlink" title="3. Micro的基本演示"></a>3. Micro的基本演示</h2><h3 id="3-1-创建微服务命令说明"><a href="#3-1-创建微服务命令说明" class="headerlink" title="3.1 创建微服务命令说明"></a>3.1 创建微服务命令说明</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">new Create a new Micro service by specifying a directory path relative to your $GOPATH</span><br><span class="line"><span class="meta">#</span>创建 通过指定相对于$GOPATH的目录路径，创建一个新的微服务。</span><br><span class="line">USAGE:</span><br><span class="line"><span class="meta">#</span>用法</span><br><span class="line">micro new [command options][arguments...]</span><br><span class="line">--namespace "go.micro" Namespace for the service e.g com.example</span><br><span class="line"><span class="meta">#</span>服务的命名空间</span><br><span class="line">--type "srv" Type of service e.g api, fnc, srv, web</span><br><span class="line"><span class="meta">#</span>服务类型</span><br><span class="line">--fqdn FQDN of service e.g com.example.srv.service (defaults to</span><br><span class="line">namespace.type.alias)</span><br><span class="line"><span class="meta">#</span>服务的正式定义全面</span><br><span class="line">--alias Alias is the short name used as part of combined name if</span><br><span class="line">specified</span><br><span class="line"><span class="meta">#</span>别名是在指定时作为组合名的一部分使用的短名称</span><br><span class="line">run Run the micro runtime</span><br><span class="line"><span class="meta">#</span>运行 运行这个微服务时间</span><br></pre></td></tr></table></figure><h3 id="3-2-创建2个服务"><a href="#3-2-创建2个服务" class="headerlink" title="3.2 创建2个服务"></a>3.2 创建2个服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>micro new --type "srv" micro/rpc/srv</span><br><span class="line"><span class="meta">#</span>"srv" 是表示当前创建的微服务类型</span><br><span class="line"><span class="meta">#</span>sss是相对于go/src下的文件夹名称 可以根据项目进行设置</span><br><span class="line"><span class="meta">#</span>srv是当前创建的微服务的文件名</span><br><span class="line">Creating service go.micro.srv.srv in /home/itcast/go/src/micro/rpc/srv</span><br><span class="line">. #</span><br><span class="line">主函数</span><br><span class="line">├── main.go</span><br><span class="line"><span class="meta">#</span>插件</span><br><span class="line">├── plugin.go</span><br><span class="line"><span class="meta">#</span>被调用函数</span><br><span class="line">├── handler</span><br><span class="line">│ └── example.go</span><br><span class="line"><span class="meta">#</span>订阅服务</span><br><span class="line">├── subscriber</span><br><span class="line">│ └── example.go</span><br><span class="line"><span class="meta">#</span>proto协议</span><br><span class="line">├── proto/example</span><br><span class="line">│ └── example.proto</span><br><span class="line"><span class="meta">#</span>docker生成文件</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── Makefile</span><br><span class="line">└──README.md</span><br><span class="line">download protobuf for micro:</span><br><span class="line"></span><br><span class="line">brew install protobuf</span><br><span class="line"><span class="meta">$</span> go get -u github.com/golang/protobuf/&#123;proto,protoc-gen-go&#125;</span><br><span class="line"><span class="meta">$</span> go get -u github.com/micro/protoc-gen-micro</span><br><span class="line">compile the proto file example.proto:</span><br><span class="line"><span class="meta">$</span> cd /home/itcast/go/src/micro/rpc/srv</span><br><span class="line">protoc --proto_path=. --go_out=. --micro_out=. proto/example/example.proto</span><br><span class="line"><span class="meta">#</span>使用创建srv时给的protobuf命令保留用来将proto文件进行编译</span><br><span class="line">micro new --type "web" micro/rpc/web</span><br><span class="line">Creating service go.micro.web.web in /home/itcast/go/src/micro/rpc/web</span><br><span class="line">. #</span><br><span class="line">主函数</span><br><span class="line">├── main.go</span><br><span class="line"><span class="meta">#</span>插件文件</span><br><span class="line">├── plugin.go</span><br><span class="line"><span class="meta">#</span>被调用处理函数</span><br><span class="line">├── handler</span><br><span class="line">│ └── handler.go</span><br><span class="line"><span class="meta">#</span>前端页面</span><br><span class="line">├── html</span><br><span class="line">│ └── index.html</span><br><span class="line"><span class="meta">#</span>docker生成文件</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── Makefile</span><br><span class="line">└──README.md</span><br><span class="line"><span class="meta">#</span>编译后将web端呼叫srv端的客户端连接内容修改为srv的内容</span><br><span class="line"><span class="meta">#</span>需要进行调通</span><br></pre></td></tr></table></figure><h3 id="3-3-启动consul进行监管"><a href="#3-3-启动consul进行监管" class="headerlink" title="3.3 启动consul进行监管"></a>3.3 启动consul进行监管</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> consul agent -dev</span><br></pre></td></tr></table></figure><h3 id="3-4-对srv服务进行的操作"><a href="#3-4-对srv服务进行的操作" class="headerlink" title="3.4 对srv服务进行的操作"></a>3.4 对srv服务进行的操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>根据提示将proto文件生成为.go文件</span><br><span class="line"><span class="meta">$</span> cd /home/itcast/go/src/micro/rpc/srv</span><br><span class="line">protoc --proto_path=. --go_out=. --micro_out=. proto/example/example.proto</span><br><span class="line"><span class="meta">#</span>如果报错就按照提示将包进行下载</span><br><span class="line"><span class="meta">$</span> go get -u github.com/golang/protobuf/&#123;proto,protoc-gen-go&#125;</span><br><span class="line"><span class="meta">$</span> go get -u github.com/micro/protoc-gen-micro</span><br><span class="line"><span class="meta">#</span>如果还不行就把以前的包删掉从新下载</span><br></pre></td></tr></table></figure><h3 id="3-5-对web服务进行的操作"><a href="#3-5-对web服务进行的操作" class="headerlink" title="3.5 对web服务进行的操作"></a>3.5 对web服务进行的操作</h3><h4 id="3-5-1-main文件"><a href="#3-5-1-main文件" class="headerlink" title="3.5.1 main文件"></a>3.5.1 main文件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/micro/go-log"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"github.com/micro/go-web"</span></span><br><span class="line">    <span class="string">"micro/rpc/web/handler"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建1个web服务</span></span><br><span class="line">    service := web.NewService(</span><br><span class="line">        <span class="comment">//注册服务名</span></span><br><span class="line">        web.Name(<span class="string">"go.micro.web.web"</span>),</span><br><span class="line">        <span class="comment">//服务的版本号</span></span><br><span class="line">        web.Version(<span class="string">"latest"</span>),</span><br><span class="line">        <span class="comment">//！添加端口</span></span><br><span class="line">        web.Address(<span class="string">":8080"</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务进行初始化</span></span><br><span class="line"><span class="keyword">if</span> err := service.Init(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//处理请求 / 的路由 //当前这个web微服务的 html文件进行映射</span></span><br><span class="line">    service.Handle(<span class="string">"/"</span>, http.FileServer(http.Dir(<span class="string">"html"</span>)))</span><br><span class="line">    <span class="comment">//处理请求 /example/call 的路由 这个相应函数 在当前项目下的handler</span></span><br><span class="line">    service.HandleFunc(<span class="string">"/example/call"</span>, handler.ExampleCall)</span><br><span class="line">    <span class="comment">//运行服务</span></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>将准备好的<code>html</code>文件替换掉原有的文件</em></strong></p><h4 id="3-5-2-handler文件"><a href="#3-5-2-handler文件" class="headerlink" title="3.5.2 handler文件"></a>3.5.2 handler文件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    <span class="string">"github.com/micro/go-micro/client"</span></span><br><span class="line">    <span class="comment">//将srv中的proto的文件导入进来进行通信的使用</span></span><br><span class="line">    example <span class="string">"micro/rpc/srv/proto/example"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="comment">//相应请求的业务函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleCall</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 将传入的请求解码为json</span></span><br><span class="line"><span class="keyword">var</span> request <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;request); err != <span class="literal">nil</span>&#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用服务</span></span><br><span class="line"><span class="comment">//替换掉原有的服务名</span></span><br><span class="line"><span class="comment">//通过服务名和</span></span><br><span class="line">exampleClient := example.NewExampleService(<span class="string">"go.micro.srv.srv"</span>,</span><br><span class="line">client.DefaultClient)</span><br><span class="line">rsp, err := exampleClient.Call(context.TODO(), &amp;example.Request&#123;</span><br><span class="line">Name: request[<span class="string">"name"</span>].(<span class="keyword">string</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// we want to augment the response</span></span><br><span class="line">response := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"msg"</span>: rsp.Msg,</span><br><span class="line">    <span class="string">"ref"</span>: time.Now().UnixNano(),</span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// encode and write the response as json</span></span><br><span class="line"><span class="keyword">if</span> err := json.NewEncoder(w).Encode(response); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-3-升级成为grpc的版本"><a href="#3-5-3-升级成为grpc的版本" class="headerlink" title="3.5.3 升级成为grpc的版本"></a>3.5.3 升级成为grpc的版本</h4><ul><li>重新生成proto文件、srv的main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/micro/go-log"</span></span><br><span class="line">    <span class="string">"github.com/micro/go-micro"</span></span><br><span class="line">    <span class="string">"micro/grpc/srv/handler"</span></span><br><span class="line">    <span class="string">"micro/grpc/srv/subscriber"</span></span><br><span class="line">    example <span class="string">"micro/grpc/srv/proto/example"</span></span><br><span class="line">    <span class="string">"github.com/micro/go-grpc"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// New Service</span></span><br><span class="line">    service := grpc.NewService(</span><br><span class="line">    micro.Name(<span class="string">"go.micro.srv.srv"</span>),</span><br><span class="line">    micro.Version(<span class="string">"latest"</span>),</span><br><span class="line">) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Initialise service</span></span><br><span class="line">    service.Init()</span><br><span class="line">    <span class="comment">// Register Handler</span></span><br><span class="line">  example.RegisterExampleHandler(service.Server(),</span><br><span class="line"><span class="built_in">new</span>(handler.Example))</span><br><span class="line"><span class="comment">// Register Struct as Subscriber</span></span><br><span class="line">micro.RegisterSubscriber(<span class="string">"go.micro.srv.srv"</span>, service.Server(),</span><br><span class="line"><span class="built_in">new</span>(subscriber.Example))</span><br><span class="line"><span class="comment">// Register Function as Subscriber</span></span><br><span class="line">micro.RegisterSubscriber(<span class="string">"go.micro.srv.srv"</span>, service.Server(),</span><br><span class="line">subscriber.Handler)</span><br><span class="line"><span class="comment">// Run service</span></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>srv的example.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="string">"github.com/micro/go-log"</span></span><br><span class="line">    example <span class="string">"micro/grpc/srv/proto/example"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Example <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call is a single request handler called via client.Call or the generated client code</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Example)</span> <span class="title">Call</span><span class="params">(ctx context.Context, req *example.Request, rsp *example.Response)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Log(<span class="string">"Received Example.Call request"</span>)</span><br><span class="line">rsp.Msg = <span class="string">"Hello "</span> + req.Name</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stream is a server side stream handler called via client.Stream or the generated client code</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Example)</span> <span class="title">Stream</span><span class="params">(ctx context.Context, req *example.StreamingRequest, stream example.Example_StreamStream)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Logf(<span class="string">"Received Example.Stream request with count: %d"</span>, req.Count)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(req.Count); i++ &#123;</span><br><span class="line">log.Logf(<span class="string">"Responding: %d"</span>, i)</span><br><span class="line"><span class="keyword">if</span> err := stream.Send(&amp;example.StreamingResponse&#123;</span><br><span class="line">Count: <span class="keyword">int64</span>(i),</span><br><span class="line">&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// PingPong is a bidirectional stream handler called via client.Stream or the generated client code</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Example)</span> <span class="title">PingPong</span><span class="params">(ctx context.Context, stream</span></span></span><br><span class="line"><span class="function"><span class="params">example.Example_PingPongStream)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">req, err := stream.Recv()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125; </span><br><span class="line">    log.Logf(<span class="string">"Got ping %v"</span>, req.Stroke)</span><br><span class="line"><span class="keyword">if</span> err := stream.Send(&amp;example.Pong&#123;Stroke: req.Stroke&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改web的main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/micro/go-log"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"github.com/micro/go-web"</span></span><br><span class="line"><span class="string">"micro/grpc/web/handler"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// create new web service</span></span><br><span class="line">    service := web.NewService(</span><br><span class="line">    web.Name(<span class="string">"go.micro.web.web"</span>),</span><br><span class="line">    web.Version(<span class="string">"latest"</span>),</span><br><span class="line">    web.Address(<span class="string">":8080"</span>),</span><br><span class="line">    )</span><br><span class="line"><span class="comment">// initialise service</span></span><br><span class="line"><span class="keyword">if</span> err := service.Init(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// register html handler</span></span><br><span class="line">service.Handle(<span class="string">"/"</span>, http.FileServer(http.Dir(<span class="string">"html"</span>)))</span><br><span class="line"><span class="comment">// register call handler</span></span><br><span class="line">service.HandleFunc(<span class="string">"/example/call"</span>, handler.ExampleCall)</span><br><span class="line"><span class="comment">// run service</span></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改web的handler.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    example <span class="string">"micro/grpc/srv/proto/example"</span></span><br><span class="line">    <span class="string">"github.com/micro/go-grpc"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleCall</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    server :=grpc.NewService()</span><br><span class="line">    server.Init()</span><br><span class="line">    <span class="comment">// decode the incoming request as json</span></span><br><span class="line">    <span class="keyword">var</span> request <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;request); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// call the backend service</span></span><br><span class="line"><span class="comment">//exampleClient := example.NewExampleService("go.micro.srv.srv",client.DefaultClient)</span></span><br><span class="line">exampleClient := example.NewExampleService(<span class="string">"go.micro.srv.srv"</span>, server.Client())</span><br><span class="line">rsp, err := exampleClient.Call(context.TODO(), &amp;example.Request&#123;</span><br><span class="line">Name: request[<span class="string">"name"</span>].(<span class="keyword">string</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// we want to augment the response</span></span><br><span class="line">response := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"msg"</span>: rsp.Msg,</span><br><span class="line"><span class="string">"ref"</span>: time.Now().UnixNano(),</span><br><span class="line">&#125; </span><br><span class="line">    <span class="comment">// encode and write the response as json</span></span><br><span class="line"><span class="keyword">if</span> err := json.NewEncoder(w).Encode(response); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-关于插件化"><a href="#4-关于插件化" class="headerlink" title="4. 关于插件化"></a>4. 关于插件化</h2><p>Go Micro跟其他工具最大的不同是它是插件化的架构，这让上面每个包的具体实现都可以切换出去。举个例子，默认的服务发现的机制是通过Consul，但是如果想切换成<code>etcd</code>或者<code>zookeeper</code>或者任何你实现的方案，都是非常便利的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Micro：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;微服务之Micro&lt;/p&gt;
    
    </summary>
    
      <category term="microServices" scheme="https://alexbrucelu.github.io/categories/microServices/"/>
    
    
      <category term="微服务" scheme="https://alexbrucelu.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>protobuf</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/protobuf/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/protobuf/</id>
    <published>2018-11-25T14:51:31.682Z</published>
    <updated>2018-11-25T14:54:51.500Z</updated>
    
    <content type="html"><![CDATA[<p><strong> protobuf：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>微服务之protobuf</p><a id="more"></a><h1 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h1><h2 id="1-protobuf-简介"><a href="#1-protobuf-简介" class="headerlink" title="1. protobuf 简介"></a>1. protobuf 简介</h2><blockquote><p><font color="red">Google Protocol Buffer(简称 Protobuf)</font>是一种轻便高效的结构化数据格式，无关平台、无关语言、可扩展，用于通讯协议和数据存储等领域。</p></blockquote><h3 id="1-1-protobuf-的优点"><a href="#1-1-protobuf-的优点" class="headerlink" title="1.1 protobuf 的优点"></a>1.1 protobuf 的优点</h3><blockquote><p>protobuf 有如XML，不过它更小、更快、规范、更简单。可以自定义自己的数据结构，然后使用代码生成器的代码来读写这个数据结构。甚至可以在无需重新部署程序的情况下更新数据结构。只需使用protobuf 对数据结构进行一次描述，即可利用各种不同的语言或从各种不同数据流中对结构化的数据轻松读写。</p><p>protobuf 向后兼容性好，不必破坏已经部署的“老”数据格式的程序就可以对数据结构进行升级。</p><p>protobuf 语义更清晰，无需类似XML 解析器的东西（因为protobuf 编译器会将.proto 文件编译生成对应的数据，访问类似于对protobuf 数据进行序列化、反序列化操作）。</p><p>protobuf 的编程模式比较友好，无需学习复杂的文档对象模型，简单易学。</p></blockquote><h3 id="1-2-protobuf-的缺点"><a href="#1-2-protobuf-的缺点" class="headerlink" title="1.2 protobuf 的缺点"></a>1.2 protobuf 的缺点</h3><blockquote><p>protobuf 与 XML 相比的不足之处有以下几点：</p><ul><li>功能简单，无法用来表示复杂的概念</li><li>XML 已经成为多种行业的标准编写工具，protobuf 只是Google 内部使用的工具，在通用性上差很多</li><li>文本并不适合描述数据结构，所以 protobuf 不适合用来对基于文本的标记文档（如HTML）建模</li><li>由于XML具有某种程度的字自解释性，它可以被人直接读取编辑，protobuf不行，它以二进制的方式存储，除非有 .proto 定义，否则无法直接读出 protobuf 的任何内容</li></ul></blockquote><h2 id="2-常见数据交互的格式比较"><a href="#2-常见数据交互的格式比较" class="headerlink" title="2. 常见数据交互的格式比较"></a>2. 常见数据交互的格式比较</h2><ol><li><p>json：一般的web项目中，最流行的主要还是json，因为浏览器对于json数据支持非常好，有很多内建函数的支持。</p></li><li><p>XML：在 WebService 中应用最为广泛，但相比json 更加冗余，因为需要成对的闭合标签，而json 使用了 键值对的方式，不仅压缩了一定的数据空间，而且具有一定的可读性</p></li><li><p>protobuf：是谷歌开源的一种数据格式，适合高性能，对响应速度有要求的传输数据场景。protobuf 是二进制数据，需要编码和解码，数据本身并不具有可读性，只有对其进行反序列化之后才能得到可读的数据</p><blockquote><p>对于其他数据格式，protobuf的优势</p><ol><li>序列化之后体积相对于json 和 XML 很小，适合网络传输</li><li>支持跨平台多语言</li><li>消息格式升级兼容性好</li><li>序列化、反序列化的速度快，快于json的处理速度</li></ol></blockquote></li></ol><h2 id="3-protobuf-的安装"><a href="#3-protobuf-的安装" class="headerlink" title="3. protobuf 的安装"></a>3. protobuf 的安装</h2><h3 id="3-1-安装-protobuf"><a href="#3-1-安装-protobuf" class="headerlink" title="3.1 安装 protobuf"></a>3.1 安装 protobuf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载 protobuf</span><br><span class="line"><span class="meta">$</span> git clone https://github.com/protocolbuffers/protobuf.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 下载依赖库</span><br><span class="line"><span class="meta">$</span> sudo apt-get install autoconf automake libtool curl make g++ unzip libffidev -y</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装</span><br><span class="line"><span class="meta">$</span> cd protobuf/</span><br><span class="line"><span class="meta">$</span> ./autogen.sh</span><br><span class="line"><span class="meta">$</span> ./configure</span><br><span class="line"><span class="meta">$</span> make</span><br><span class="line"><span class="meta">$</span> sudo make install</span><br><span class="line"><span class="meta">$</span> sudo ldconfig # 刷新共享库（重要）</span><br><span class="line"><span class="meta">$</span> protoc -h</span><br><span class="line"><span class="meta">#</span> 出现帮助列表说明protobuf 安装成功</span><br></pre></td></tr></table></figure><h3 id="3-2-获取-proto-包"><a href="#3-2-获取-proto-包" class="headerlink" title="3.2 获取 proto 包"></a>3.2 获取 proto 包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go get -v -u github.com/golang/protobuf/protoc</span><br></pre></td></tr></table></figure><h3 id="3-3-安装-protoc-gen-go-插件"><a href="#3-3-安装-protoc-gen-go-插件" class="headerlink" title="3.3 安装 protoc-gen-go 插件"></a>3.3 安装 protoc-gen-go 插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装</span><br><span class="line"><span class="meta">$</span> go get -v -u github.com/golang/protobuf/protoc-gen-go</span><br><span class="line"><span class="meta">#</span> 编译</span><br><span class="line"><span class="meta">$</span> cd $GOPATH/src/github.com/golang/protobuf/protoc-gen-go</span><br><span class="line"><span class="meta">$</span> go build</span><br><span class="line"><span class="meta">#</span> 将生成的 protoc-gen-go 可执行文件放在/bin 目录下</span><br><span class="line"><span class="meta">$</span> sudo cp protoc-gen-go /bin/</span><br></pre></td></tr></table></figure><h2 id="4-protobuf-的语法"><a href="#4-protobuf-的语法" class="headerlink" title="4. protobuf 的语法"></a>4. protobuf 的语法</h2><h3 id="4-1-定义一个消息"><a href="#4-1-定义一个消息" class="headerlink" title="4.1 定义一个消息"></a>4.1 定义一个消息</h3><p>要想使用 protobuf 必须先得定义 proto 文件，所以先得 熟悉消息定义的相关语法</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">message BruceRequest &#123;</span><br><span class="line">    string name = 1;</span><br><span class="line">    int32 height = 2;</span><br><span class="line">    repeated int32 weight = 3；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>BruceRequest</strong> 消息格式有三个字段，在消息中承载的数据分别对应于每一个字段，其中每一个字段都有一个名字和一种类型</p></li><li><p>文件第一行是指定了使用<code>proto3</code> 语法，如果没有指定，默认<code>proto2</code> 语法。指定语法行，必须是非空、非注释的第一行</p></li><li><code>repeated</code> 关键字表示重复的，在go语言中用切片进行代表</li><li>在消息定义中每个字段都有一个唯一的标识符</li></ul><h3 id="4-3-定义一个消息类型"><a href="#4-3-定义一个消息类型" class="headerlink" title="4.3 定义一个消息类型"></a>4.3 定义一个消息类型</h3><p>在一个 .proto 文件中可以定义多个消息类型。在定义多个相关的消息的时候，这一点特别有用——例如，如果想定义与 SearchResponse 消息类型对应的回复消息格式的话，你可以将它添加到相同的 .proto 文件中</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">message BruceRequest &#123;</span><br><span class="line">    string name = 1;</span><br><span class="line">    int32 height = 2;</span><br><span class="line">    repeated int32 weight = 3；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message AlexRequest &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-添加注释"><a href="#4-4-添加注释" class="headerlink" title="4.4 添加注释"></a>4.4 添加注释</h3><p>如一般的编程语言一直使用 ‘//‘</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">message BruceRequest &#123;</span><br><span class="line">    string name = 1; // 姓名</span><br><span class="line">    int32 height = 2; // 身高</span><br><span class="line">    repeated int32 weight = 3；// 体重</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message AlexRequest &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-proto-文件生成文件"><a href="#4-5-proto-文件生成文件" class="headerlink" title="4.5 .proto 文件生成文件"></a>4.5 .proto 文件生成文件</h3><p>当用protocol buffer编译器来运行.proto文件时，编译器将生成所选择语言的代码，这些代码可以操作在.proto文件中定义的消息类型，包括获取、设置字段值，将消息序列化到一个输出流中，以及从一个输入流中解析消息。</p><blockquote><p>对C++来说，编译器会为每个.proto文件生成一个.h文件和一个.cc文件，.proto文件中的每一个消息有一个对应的类。 对Python来说，有点不太一样——Python编译器为.proto文件中的每个消息类型生成一个含有静态描述符的模块，，该模块与一个元类（metaclass）在运行时（runtime）被用来创建所需的Python数据访问类。 对go来说，编译器会为每个消息类型生成了一个.pd.go文件。</p></blockquote><h3 id="4-6-标准数据类型"><a href="#4-6-标准数据类型" class="headerlink" title="4.6 标准数据类型"></a>4.6 标准数据类型</h3><p>一个标量消息字段可以含有一个如下的类型:</p><blockquote><p>该表格展示了定义于.proto文件中的类型，以及与之对应的、在自动生成的访问类中定义的类型</p></blockquote><table><thead><tr><th style="text-align:center">.proto</th><th style="text-align:center">Notes</th><th style="text-align:center">C++</th><th style="text-align:center">Python</th><th style="text-align:center">Go</th></tr></thead><tbody><tr><td style="text-align:center">double</td><td style="text-align:center"></td><td style="text-align:center">double</td><td style="text-align:center">float</td><td style="text-align:center">float64</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center"></td><td style="text-align:center">float</td><td style="text-align:center">float</td><td style="text-align:center">float32</td></tr><tr><td style="text-align:center">int32</td><td style="text-align:center">使用变长编码，对于负值的效率很低,如果你的域有可能有负值，请使用sint64替代</td><td style="text-align:center">int32</td><td style="text-align:center">int</td><td style="text-align:center">int32</td></tr><tr><td style="text-align:center">uint32</td><td style="text-align:center">使用变长编码</td><td style="text-align:center">uint32</td><td style="text-align:center">int/long</td><td style="text-align:center">uint32</td></tr><tr><td style="text-align:center">uint64</td><td style="text-align:center">使用变长编码</td><td style="text-align:center">uint64</td><td style="text-align:center">int/long</td><td style="text-align:center">uint64</td></tr><tr><td style="text-align:center">sint32</td><td style="text-align:center">使用变长编码，这些编码在负值时比int32高效的多</td><td style="text-align:center">int32</td><td style="text-align:center">int</td><td style="text-align:center">int32</td></tr><tr><td style="text-align:center">sint64</td><td style="text-align:center">使用变长编码，有符号的整型值。编码时比通常的int64高效</td><td style="text-align:center">int64</td><td style="text-align:center">int/long</td><td style="text-align:center">int64</td></tr><tr><td style="text-align:center">fixed32</td><td style="text-align:center">总是4个字节，如果数值总是比总是比228大的话，这个类型会比uint32高效</td><td style="text-align:center">uint32</td><td style="text-align:center">int</td><td style="text-align:center">uint32</td></tr><tr><td style="text-align:center">fixed64</td><td style="text-align:center">总是8个字节，如果数值总是比总是比256大的话，这个类型会比uint64高效</td><td style="text-align:center">uint64</td><td style="text-align:center">int/long</td><td style="text-align:center">uint64</td></tr><tr><td style="text-align:center">sfixed32</td><td style="text-align:center">总是4个字节</td><td style="text-align:center">int32</td><td style="text-align:center">int</td><td style="text-align:center">int32</td></tr><tr><td style="text-align:center">sfixed32</td><td style="text-align:center">总是4个字节</td><td style="text-align:center">int32</td><td style="text-align:center">int</td><td style="text-align:center">int32</td></tr><tr><td style="text-align:center">sfixed64</td><td style="text-align:center">总是8个字节</td><td style="text-align:center">int64</td><td style="text-align:center">int/long</td><td style="text-align:center">int64</td></tr><tr><td style="text-align:center">bool</td><td style="text-align:center"></td><td style="text-align:center">bool</td><td style="text-align:center">bool</td><td style="text-align:center">bool</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">一个字符串必须是UTF-8编码或者7-bit ASCII编码的文本</td><td style="text-align:center">string</td><td style="text-align:center">str/unicode</td><td style="text-align:center">string</td></tr><tr><td style="text-align:center">bytes</td><td style="text-align:center">可能包含任意顺序的字节数据</td><td style="text-align:center">string</td><td style="text-align:center">str</td><td style="text-align:center">[]byte</td></tr></tbody></table><h4 id="4-6-1-默认值"><a href="#4-6-1-默认值" class="headerlink" title="4.6.1 默认值"></a>4.6.1 默认值</h4><p>当一个消息被解析的时候，如果被编码的信息不包含一个特定的元素，被解析的对象锁对应的域被设置位一个默认值，对于不同类型指定如下： </p><ul><li>对于strings，默认是一个空string </li><li>对于bytes，默认是一个空的bytes </li><li>对于bool，默认是false </li><li>对于数值类型，默认是0</li></ul><h3 id="4-7-使用其他消息类型"><a href="#4-7-使用其他消息类型" class="headerlink" title="4.7 使用其他消息类型"></a>4.7 使用其他消息类型</h3><p>可以将其他消息类型用作字段类型。</p><blockquote><p>例如，假设在每一个PersonInfo消息中包含Person消息，此时可以在相同的 .proto 文件中定义一个Result消息类型，然后在PersonInfo消息中指定一个Person类型的字段</p></blockquote><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">message BruceRequest &#123;</span><br><span class="line">    string name = 1;</span><br><span class="line">    int32 height = 2;</span><br><span class="line">    repeated int32 weight = 3；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-8-使用proto2消息类型"><a href="#4-8-使用proto2消息类型" class="headerlink" title="4.8 使用proto2消息类型"></a>4.8 使用proto2消息类型</h3><p>在你的proto3消息中导入proto2的消息类型也是可以的，反之亦然，然后proto2枚举不可以直接在proto3的标识符中使用（如果仅仅在proto2消息中使用是可以的）。</p><h4 id="4-8-1-嵌套类型"><a href="#4-8-1-嵌套类型" class="headerlink" title="4.8.1 嵌套类型"></a>4.8.1 嵌套类型</h4><p>你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Person消息就定义在PersonInfo消息内，如：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">message PersonInfo &#123;</span><br><span class="line">message Person &#123;</span><br><span class="line">string name = 1;</span><br><span class="line">int32 shengao = 2;</span><br><span class="line">repeated int32 tizhong = 3;</span><br><span class="line">&#125; </span><br><span class="line">repeated Person info = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想在它的父消息类型的外部重用这个消息类型，你需要以PersonInfo.Person的形式使用它，如：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message PersonMessage &#123;</span><br><span class="line">PersonInfo.Person info = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，你也可以将消息嵌套任意多层，如：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">message Grandpa &#123; // Level 0</span><br><span class="line">message Father &#123; // Level 1</span><br><span class="line">message son &#123; // Level 2</span><br><span class="line">string name = 1;</span><br><span class="line">int32 age = 2;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">message Uncle &#123; // Level 1</span><br><span class="line">message Son &#123; // Level 2</span><br><span class="line">string name = 1;</span><br><span class="line">int32 age = 2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-8-2-定义服务-Service"><a href="#4-8-2-定义服务-Service" class="headerlink" title="4.8.2 定义服务(Service)"></a>4.8.2 定义服务(Service)</h4><p>果想要将消息类型用在RPC(远程方法调用)系统中，可以在.proto文件中定义一个RPC服务接口，protocol buffer编译器将会根据所选择的不同语言生成服务接口代码及存根。如，想要定义一个RPC服务并具有一个方法，该方法能够接收 SearchRequest并返回一个SearchResponse，此时可以在.proto文件中进行如下定义：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service SearchService &#123;</span><br><span class="line">//rpc 服务的函数名 （传入参数）返回（返回参数）</span><br><span class="line">rpc Search (SearchRequest) returns (SearchResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最直观的使用protocol buffer的RPC系统是gRPC一个由谷歌开发的语言和平台中的开源的RPC系统，gRPC在使用protocl buffer时非常有效，如果使用特殊的protocol buffer插件可以直接为您从.proto文件中产生相关的RPC代码。</p><p>如果你不想使用gRPC，也可以使用protocol buffer用于自己的RPC实现，你可以从proto2语言指南中找到更多信息</p><h4 id="4-8-3-生成访问类"><a href="#4-8-3-生成访问类" class="headerlink" title="4.8.3 生成访问类"></a>4.8.3 生成访问类</h4><p>可以通过定义好的.proto文件来生成Java,Python,C++, Ruby, JavaNano, Objective-C,或者C# 代码，需要基于.proto文件运行protocol buffer编译器protoc。如果你没有安装编译器，下载安装包并遵照README安装。对于Go,你还需要安装一个特殊的代码生成器件。你可以通过GitHub上的protobuf库找到安装过程<br>通过如下方式调用protocol编译器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> protoc --proto_path=IMPORT_PATH --cpp_out=DST_DIR --python_out=DST_DIR --go_out=DST_DIR path/to/file.proto</span><br></pre></td></tr></table></figure><p>IMPORT_PATH声明了一个.proto文件所在的解析import具体目录。如果忽略该值，则使用当前目录。如果有多个目录则可以多次调用–proto_path，它们将会顺序的被访问并执行导入。-I=IMPORT_PATH是–proto_path的简化形式。</p><p><strong>当然也可以提供一个或多个输出路径：</strong></p><p> –cpp_out 在目标目录DST_DIR中产生C++代码，可以在C++代码生成参考中查看更多。 </p><p>–python_out 在目标目录 DST_DIR 中产生Python代码，可以在Python代码生成参考中查看更多。</p><p>–go_out 在目标目录 DST_DIR 中产生Go代码，可以在GO代码生成参考中查看更多。</p><blockquote><p>作为一个方便的拓展，如果DST_DIR以.zip或者.jar结尾，编译器会将输出写到一个ZIP格式文件或者符合JAR标准的.jar文件中。注意如果输出已经存在则会被覆盖，编译器还没有智能到可以追加文件。 - 你必须提议一个或多个.proto文件作为输入，多<br>个.proto文件可以只指定一次。虽然文件路径是相对于当前目录的，每个文件必须位于其IMPORT_PATH下，以便每个文件可以确定其规范的名称。</p></blockquote><h4 id="4-8-4-测试"><a href="#4-8-4-测试" class="headerlink" title="4.8.4 测试"></a>4.8.4 测试</h4><p>protobuf的使用方法是将数据结构写入到 .proto文件中，使用 protoc编译器编译(间接使用了插件）得到一个新的go包，里面包含 go中可以使用的数据结构和一些辅助方法。</p><ul><li><p>编写 test.proto文件</p><ul><li><p>$GOPATH/src/创建 myproto文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd $GOPATH/src/</span><br><span class="line"><span class="meta">$</span> mkdir myproto</span><br></pre></td></tr></table></figure></li><li><p>myproto文件夹中创建 test.proto文件 (protobuf协议文件)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim test.proto</span><br></pre></td></tr></table></figure></li><li><p>文件内容</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">package myproto;</span><br><span class="line"></span><br><span class="line">message Test &#123;</span><br><span class="line">string name = 1;</span><br><span class="line">int32 stature = 2 ;</span><br><span class="line">repeated int64 weight = 3;</span><br><span class="line">string motto = 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>编译 :执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ protoc --go_out=./ *.proto </span><br><span class="line"><span class="comment"># 生成 test.pb.go文件</span></span><br></pre></td></tr></table></figure></li><li><p>使用 protobuf 做数据格式转换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/golang/protobuf/proto"</span></span><br><span class="line"><span class="string">"myproto"</span></span><br><span class="line">) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test := &amp;myproto.Test&#123;</span><br><span class="line">Name : <span class="string">"panda"</span>,</span><br><span class="line">Stature : <span class="number">180</span>,</span><br><span class="line">Weight : []<span class="keyword">int64</span>&#123;<span class="number">120</span>,<span class="number">125</span>,<span class="number">198</span>,<span class="number">180</span>,<span class="number">150</span>,<span class="number">180</span>&#125;,</span><br><span class="line">Motto : <span class="string">"天行健，地势坤"</span>,</span><br><span class="line">&#125; </span><br><span class="line">    <span class="comment">//将Struct test 转换成 protobuf</span></span><br><span class="line">data,err:= proto.Marshal(test)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"转码失败"</span>,err)</span><br><span class="line">&#125; </span><br><span class="line">    <span class="comment">//得到一个新的Test结构体 newTest</span></span><br><span class="line">newtest:= &amp;myproto.Test&#123;&#125;</span><br><span class="line">    <span class="comment">//将data转换为test结构体</span></span><br><span class="line">err = proto.Unmarshal(data,newtest)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"转码失败"</span>,err)</span><br><span class="line">&#125; </span><br><span class="line">    fmt.Println(newtest.String())</span><br><span class="line"><span class="comment">//得到name字段</span></span><br><span class="line">fmt.Println(<span class="string">"newtest-&gt;name"</span>,newtest.GetName())</span><br><span class="line">fmt.Println(<span class="string">"newtest-&gt;Stature"</span>,newtest.GetStature())</span><br><span class="line">fmt.Println(<span class="string">"newtest-&gt;Weight"</span>,newtest.GetWeight())</span><br><span class="line">fmt.Println(<span class="string">"newtest-&gt;Motto"</span>,newtest.GetMotto())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; protobuf：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;微服务之protobuf&lt;/p&gt;
    
    </summary>
    
      <category term="microServices" scheme="https://alexbrucelu.github.io/categories/microServices/"/>
    
    
      <category term="微服务" scheme="https://alexbrucelu.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>微服务基础简介</title>
    <link href="https://alexbrucelu.github.io/2018/11/25/01/"/>
    <id>https://alexbrucelu.github.io/2018/11/25/01/</id>
    <published>2018-11-25T14:27:45.480Z</published>
    <updated>2018-11-25T14:49:06.106Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 微服务基础简介：</strong> <excerpt in="" index="" |="" 首页摘要=""></excerpt></p><p>微服务基础概念简介</p><a id="more"></a><h1 id="一、微服务（microServices）"><a href="#一、微服务（microServices）" class="headerlink" title="一、微服务（microServices）"></a>一、微服务（microServices）</h1><h2 id="1-什么是微服务？"><a href="#1-什么是微服务？" class="headerlink" title="1. 什么是微服务？"></a>1. 什么是微服务？</h2><p>在介绍微服务时，首先得先理解什么是微服务，顾名思义，微服务得从两个方面去理解，什么是”微”、什么是”服<br>务”？ 微（micro） 狭义来讲就是体积小，著名的”2 pizza 团队”很好的诠释了这一解释（2 pizza 团队最早是亚马<br>逊 CEO Bezos提出来的，意思是说单个服务的设计，所有参与人从设计、开发、测试、运维所有人加起来 只需要2个披萨就够了 ）。 服务（service） 一定要区别于系统，服务一个或者一组相对较小且独立的功能单元，是用户<br>可以感知最小功能集。</p><p>那么广义上来讲，微服务是一种分布式系统解决方案，推动细粒度服务的使用，这些服务协同工作。</p><h2 id="2-为什么需要微服务？"><a href="#2-为什么需要微服务？" class="headerlink" title="2. 为什么需要微服务？"></a>2. 为什么需要微服务？</h2><h3 id="2-1-开发单体式应用的不足之处"><a href="#2-1-开发单体式应用的不足之处" class="headerlink" title="2.1 开发单体式应用的不足之处"></a>2.1 开发单体式应用的不足之处</h3><ul><li><strong>单体式打车软件的架构示意图</strong></li></ul><p><img src="https://github.com/AlexBruceLu/DAPP/wiki/Uber0.png" alt="示意图"></p><ul><li><p><strong>三层架构（MVC）的具体内容如下：</strong></p><ul><li><p><strong>表示层（view）</strong>： 用户使用应用程序时，看到的、听见的、输入的或者交互的部分。</p></li><li><p><strong>业务逻辑层（controller）</strong>： 根据用户输入的信息，进行逻辑计算或者业务处理的部分。</p></li><li><p><strong>数据访问层（model）</strong>： 关注有效地操作原始数据的部分，如将数据存储到存储介质（如数据库、文件系统）及从存储介质中读取数据等。</p><blockquote><font color="green">虽然现在程序被分成了三层，但只是逻辑上的分层，并不是物理上的分层。也就是说，对不同层的代码而言，经过编译、打包和部署后，所有的代码最终还是运行在同一个进程中。而这，就是所谓的单块架构。</font></blockquote></li></ul></li><li><p><strong>随着业务的不断扩大，不断暴露出的问题</strong></p><ul><li><p>复杂性逐渐变高</p><blockquote><p>比如有的项目有几十万行代码，各个模块之间区别比较模糊，逻辑比较混乱，代码越多复杂性越高，越难解决遇到的问题。</p></blockquote></li><li><p>技术债务逐渐上升</p><blockquote><p>公司的人员流动是再正常不过的事情，有的员工在离职之前，疏于代码质量的自我管束，导致留下来很多坑，由于单体项目代码量庞大的惊人，留下的坑很难被发觉，这就给新来的员工带来很大的烦恼，人员流动越大所留下的坑越多，也就是所谓的技术债务越来越多。</p></blockquote></li><li><p>维护成本大</p><blockquote><p>当应用程序的功能越来越多、团队越来越大时，沟通成本、管理成本显著增加。当出现 bug 时，可能引起 bug 的原因组合越来越多，导致分析、定位和修复的成本增加；并且在对全局功能缺乏深度理解的情况下，容易在修复bug 时引入新的 bug。</p></blockquote></li><li><p>持续交付周期长</p><blockquote><p>构建和部署时间会随着功能的增多而增加，任何细微的修改都会触发部署流水线。新人培养周期长：新成员了解背景、熟悉业务和配置环境的时间越来越长。 技术选型成本高 单块架构倾向于采用统一的技术平台或方案来解决所有问题，如果后续想引入新的技术或框架，成本和风险都很大。</p></blockquote></li><li><p>可扩展性差</p><blockquote><p>随着功能的增加，垂直扩展的成本将会越来越大；而对于水平扩展而言，因为所有代码都运行在同一个进程，没办法做到针对应用程序的部分功能做独立的扩展。</p></blockquote></li></ul></li></ul><h3 id="2-2-微服务的优点"><a href="#2-2-微服务的优点" class="headerlink" title="2.2 微服务的优点"></a>2.2 微服务的优点</h3><ul><li><strong>微服务架构示意图</strong></li></ul><p><img src="https://github.com/AlexBruceLu/DAPP/wiki/Uber1.png" alt=""></p><ul><li><font color="red"><strong>微服务架构的特性</strong></font><ul><li><p>职责单一</p><blockquote><p>微服务架构中的每个服务，都是具有业务逻辑的，符合高内聚、低耦合原则以及单一职责原则的单元，不同的服务通过“管道”的方式灵活组合，从而构建出庞大的系统。</p></blockquote></li><li><p>轻量级通信</p><blockquote><p>服务之间通过轻量级的通信机制实现互通互联，而所谓的轻量级，通常指语言无关、平台无关的交互方式。对于轻量级通信的格式而言，我们熟悉的 XML 和 JSON，它们是语言无关、平台无关的；对于通信的协议而言，通常基于 HTTP，能让服务间的通信变得标准化、无状态化。目前大家熟悉的 REST（Representational State Transfer）是实现服务间互相协作的轻量级通信机制之一。使用轻量级通信机制，可以让团队选择更适合的语言、工具或者平台来开发服务本身。</p><p><font color="red">问：REST是什么和restful一样吗？</font><br>答：REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就RESTful。</p></blockquote></li><li><p>独立性</p><blockquote><p>在微服务架构中，每个服务都是独立的业务单元，与其他服务高度解耦，只需要改变当前服务本身，就可以完成独立的开发、测试和部署。</p></blockquote></li><li><p>进程隔离</p><blockquote><p>在微服务架构中，应用程序由多个服务组成，每个服务都是高度自治的独立业务实体，可以运行在独立的进程中，不同的服务能非常容易地部署到不同的主机上。</p></blockquote></li></ul></li></ul><h3 id="2-3-微服务的缺点"><a href="#2-3-微服务的缺点" class="headerlink" title="2.3 微服务的缺点"></a>2.3 微服务的缺点</h3><ul><li><p>运维要求较高</p><blockquote><p>对于单体架构来讲，我们只需要维护好这一个项目就可以了，但是对于微服务架构来讲，由于项目是由多个微服务构成的，每个模块出现问题都会造成整个项目运行出现异常，想要知道是哪个模块造成的问题往往是不容易的，因为我们无法一步一步通过debug的方式来跟踪，这就对运维人员提出了很高的要求。</p></blockquote></li><li><p>分布式的复杂性</p><blockquote><p>对于单体架构来讲，我们可以不使用分布式，但是对于微服务架构来说，分布式几乎是必会用的技术，由于分布式本身的复杂性，导致微服务架构也变得复杂起来。</p></blockquote></li><li><p>接口调整成本高</p><blockquote><p>比如，用户微服务是要被订单微服务和电影微服务所调用的，一旦用户微服务的接口发生大的变动，那么所有依赖它的微服务都要做相应的调整，由于微服务可能非常多，那么调整接口所造成的成本将会明显提高。</p></blockquote></li><li><p>重复劳动</p><blockquote><p>对于单体架构来讲，如果某段业务被多个模块所共同使用，我们便可以抽象成一个工具类，被所有模块直接调用，但是微服务却无法这样做，因为这个微服务的工具类是不能被其它微服务所直接调用的，从而我们便不得不在每个微服务上都建这么一个工具类，从而导致代码的重复。</p></blockquote></li></ul><h2 id="3-传统单体架构与分布式微服务架构的区别"><a href="#3-传统单体架构与分布式微服务架构的区别" class="headerlink" title="3. 传统单体架构与分布式微服务架构的区别"></a>3. 传统单体架构与分布式微服务架构的区别</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><strong>传统单体架构</strong></th><th style="text-align:center"><strong>分布式微服务化架构</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>新功能开发</strong></td><td style="text-align:center">需要时间</td><td style="text-align:center">容易开发和实线</td></tr><tr><td style="text-align:center"><strong>部署</strong></td><td style="text-align:center">不经常而且容易部署</td><td style="text-align:center">经常发布，部署复杂</td></tr><tr><td style="text-align:center"><strong>隔离性</strong></td><td style="text-align:center">故障影响范围大</td><td style="text-align:center">故障影响范围小</td></tr><tr><td style="text-align:center"><strong>架构设计</strong></td><td style="text-align:center">初期设计选型难度大</td><td style="text-align:center">设计逻辑难度大</td></tr><tr><td style="text-align:center"><strong>系统性能</strong></td><td style="text-align:center">响应时间快，吞吐量小</td><td style="text-align:center">响应时间慢，吞吐量大</td></tr><tr><td style="text-align:center"><strong>系统运维</strong></td><td style="text-align:center">运维简单</td><td style="text-align:center">运维复杂</td></tr><tr><td style="text-align:center"><strong>新人上手</strong></td><td style="text-align:center">学习曲线大（应用逻辑）</td><td style="text-align:center">学习曲线大（架构逻辑）</td></tr><tr><td style="text-align:center"><strong>技术</strong></td><td style="text-align:center">技术单一而且封闭</td><td style="text-align:center">技术多样而且开发</td></tr><tr><td style="text-align:center"><strong>测试和差错</strong></td><td style="text-align:center">简单</td><td style="text-align:center">复杂（每个服务都要进行单独测试，还需要集群测试）</td></tr><tr><td style="text-align:center"><strong>系统扩展性</strong></td><td style="text-align:center">扩展性差</td><td style="text-align:center">扩展性好</td></tr><tr><td style="text-align:center"><strong>系统管理</strong></td><td style="text-align:center">重点在于开发成本</td><td style="text-align:center">重点在于服务治理和调度</td></tr></tbody></table><h2 id="4-为什么使用微服务架构"><a href="#4-为什么使用微服务架构" class="headerlink" title="4. 为什么使用微服务架构"></a>4. 为什么使用微服务架构</h2><ul><li><p>开发简单</p><blockquote><p>微服务架构将复杂系统进行拆分之后，让每个微服务应用都开放变得非常简单，没有太多的累赘。对于每一个开发者来说，这无疑是一种解脱，因为再也不用进行繁重的劳动了，每天都在一种轻松愉快的氛围中工作，其效率也会整备地提高</p></blockquote></li><li><p>快速响应需求变化</p><blockquote><p>一般的需求变化来自于举步功能的变化，这种变化落实到每个微服务上，而每个微服务的功能相对来说都非常简单，更改起来非常容易，所以微服务非常适合敏捷开发方式，能够快速的影响业务的需求变化。</p></blockquote></li><li><p>随时随地更新</p><blockquote><p>一方面，微服务的部署和更新并不会影响全局系统的正常运行；</p><p>另一方面，使用多实例的部署方法，可以做到一个服务的重启和更新在不易察觉的情况下进行，所以每个服务任何时候都可以进行更新部署。</p></blockquote></li><li><p>系统更加稳定可靠</p><blockquote><p>微服务运行在一个高可用的分布式环境之中，有配套的监控和调度管理机制，并且还可以提供自由伸缩的管理，充分保证了系统的稳定性和可靠性。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 微服务基础简介：&lt;/strong&gt; &lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;/excerpt&gt;&lt;/p&gt;
&lt;p&gt;微服务基础概念简介&lt;/p&gt;
    
    </summary>
    
      <category term="microServices" scheme="https://alexbrucelu.github.io/categories/microServices/"/>
    
    
      <category term="微服务" scheme="https://alexbrucelu.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
